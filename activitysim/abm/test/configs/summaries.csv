Description,Output,Expression
Count Tours,tours_count,"pd.Series([len(tours)], index=['trips'])"
Count Trips,trips_count,"pd.Series([len(trips)], index=['trips'])"
Count Households,households_count,"pd.Series([len(households)], index=['households'])"
Count Persons,persons_count,"pd.Series([len(persons)], index=['persons'])"
Count Tours per Household,tours_per_household_count,"pd.Series([len(tours) / len(households)], index=['tours_per_household'])"
Count Trips per Household,trips_per_household_count,"pd.Series([len(trips) / len(households)], index=['tours_per_household'])"
Trip Mode Share,trip_mode_pct,(trips.groupby('trip_mode').trip_id.count() / len(trips)).rename('trip_pct')
Trip Purpose,trip_purpose_pct,(trips.groupby('primary_purpose').trip_id.count() / len(trips)).rename('trip_pct')
Trips by Purpose and Time of Day,trip_purpose_tod_count,"trips.groupby(['primary_purpose','depart']).trip_id.count().rename('trips')"
Work Tour Departure Time,work_tours_tod_count,"tours[tours.tour_type == 'work'].merge(trips[['tour_id','depart']], on='tour_id').groupby('tour_id').depart.min().value_counts().sort_index()"
School Tour Departure Time,school_tours_tod_count,"tours[tours.tour_type == 'school'].merge(trips[['tour_id','depart']], on='tour_id').groupby('tour_id').depart.min().value_counts().sort_index()"
Non-Mandatory Tour Departure Time,non_mandatory_tours_tod_count,"tours[tours.tour_category == 'non_mandatory'].merge(trips[['tour_id','depart']], on='tour_id').groupby('tour_id').depart.min().value_counts().sort_index()"
Tour to Trip Mode Share,tour_to_trip_mode_pct,"(tours[['tour_id','tour_mode']].merge(trips[['tour_id','trip_mode']], on='tour_id').groupby(['tour_mode','trip_mode']).size() / len(trips)).rename('trips')"
