Description,Expression,DRIVEALONEFREE,DRIVEALONEPAY,SHARED2FREE,SHARED2PAY,SHARED3FREE,SHARED3PAY,WALK,BIKE,WALK_ALLTRN,WALK_PRMTRN,PNR_ALLTRN,PNR_PRMTRN,KNR_ALLTRN,KNR_PRMTRN,SCHOOL_BUS
#SOV FREE,,,,,,,,,,,,,,,,
SOVFREE  - Unavailable for 0 auto HH,auto_ownership == 0,-999,,,,,,,,,,,,,,
SOVFREE - Unavailable for persons with age < 16,is_predrive == True,-999,,,,,,,,,,,,,,
SOVFREE - Unavailable for work subtour if didn't drive to work,is_atwork_subtour & ~work_tour_is_SOV,-999,,,,,,,,,,,,,,
SOVFREE - In-vehicle time,@coef_ivt*(odt_skims['SOV_FREE_TIME']+dot_skims['SOV_FREE_TIME']),1,,,,,,,,,,,,,,
SOVFREE - Operating cost,@df.coef_cost*(costPerMile*(odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])+100*odt_skims['SOV_FREE_TOLL']+100*dot_skims['SOV_FREE_TOLL']),1,,,,,,,,,,,,,,
SOVFREE - Parking cost (need to apply CT RAMP Filter - (@freeParking==2)),@df.pay_to_park * df.coef_cost * cost_parking * df.PARKRATE * 100,1,,,,,,,,,,,,,,
SOVFREE - Person's age 16-22,@coef_da_age1622 * df.is_age1622,1,,,,,,,,,,,,,,
SOVFREE - Person is homemaker,@coef_da_hmmake * df.is_nonworker_adult,1,,,,,,,,,,,,,,
SOVFREE - Person's age 16-17,@coef_da_age1617 * df.is_age1617,1,,,,,,,,,,,,,,
SOVFREE - University (CTRAMP expression looks odd to me - see Row 160 on University Tab),(auto_ownership == 0) & is_predrive,1,,,,,,,,,,,,,,
SOVFREE - Person is worker,@coef_da_worker * df.is_worker,1,,,,,,,,,,,,,,
SOVFREE - Person's age 40-59,@coef_da_age4059 * df.is_age4059,1,,,,,,,,,,,,,,
SOVFREE - Person's age 60-79,@coef_da_age6079 * df.is_age6079,1,,,,,,,,,,,,,,
SOVFREE - Person is non-working adult,@coef_da_nonWrkAdlt * df.is_nonworker_adult,1,,,,,,,,,,,,,,
SOVFREE - Od distance < 5 miles,@coef_da_odDistLess5Mile * (odt_skims['SOV_FREE_DISTANCE']<5) * (dot_skims['SOV_FREE_DISTANCE']<5),1,,,,,,,,,,,,,,
SOVFREE - Joint tour and number of participants == 2,is_joint & (number_of_participants == 2),-999,,,,,,,,,,,,,,
SOVFREE - Joint tour and number of participants > 2,is_joint & (number_of_participants > 2),-999,,,,,,,,,,,,,,
SOVFREE - Tour purpose is shopping,@coef_da_tourPur_Shp * (df.is_shopping),1,,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
# SOV PAY,,,,,,,,,,,,,,,,
SOVPAY - Unavailable if toll distance = 0,SOV_PAY_Available==False,,-999,,,,,,,,,,,,,
SOVPAY - Unavailable for 0 auto HH,auto_ownership == 0,,-999,,,,,,,,,,,,,
SOVPAY - Unavailable for persons with age < 16,is_predrive == True,,-999,,,,,,,,,,,,,
SOVPAY - Unavailable for work subtour if didn't drive to work,is_atwork_subtour & ~work_tour_is_SOV,,-999,,,,,,,,,,,,,
SOVPAY - In-vehicle time,@coef_ivt*(odt_skims['SOV_TOLL_TIME']+dot_skims['SOV_TOLL_TIME']) * (df.SOV_PAY_Available),,1,,,,,,,,,,,,,
SOVPAY - Operating cost,@df.coef_cost*(costPerMile*(odt_skims['SOV_TOLL_DISTANCE']+dot_skims['SOV_TOLL_DISTANCE'])+100*odt_skims['SOV_TOLL_TOLL']+100*dot_skims['SOV_TOLL_TOLL']) * (df.SOV_PAY_Available),,1,,,,,,,,,,,,,
SOVPAY - Parking cost (Need to apply CT RAMP Filter - (@freeParking==2)),@df.pay_to_park * df.coef_cost * cost_parking * df.PARKRATE * 100 * (df.SOV_PAY_Available),,1,,,,,,,,,,,,,
SOVPAY - Constant,@coef_ivt*0*(df.SOV_PAY_Available),,1,,,,,,,,,,,,,
SOVPAY - Person's age 16-22,@coef_da_age1622 * df.is_age1622,,1,,,,,,,,,,,,,
SOVPAY - Person is homemaker,@coef_da_hmmake * df.is_nonworker_adult,,1,,,,,,,,,,,,,
SOVPAY - Person's age 16-17,@coef_da_age1617 * df.is_age1617,,1,,,,,,,,,,,,,
SOVPAY - University (CTRAMP expression looks odd to me - see Row 160 on University Tab),(auto_ownership == 0) & (is_predrive),,1,,,,,,,,,,,,,
SOVPAY - Person is worker,@coef_da_worker * df.is_worker,,1,,,,,,,,,,,,,
SOVPAY - Person's age 40-59,@coef_da_age4059 * df.is_age4059,,1,,,,,,,,,,,,,
SOVPAY - Person's age 60-79,@coef_da_age6079 * df.is_age6079,,1,,,,,,,,,,,,,
SOVPAY - Person is non-working adult,@coef_da_nonWrkAdlt * df.is_nonworker_adult,,1,,,,,,,,,,,,,
SOVPAY - Od distance < 5 miles ('FREE' distance was used in Drive Alone Pay as well),@coef_da_odDistLess5Mile * (odt_skims['SOV_FREE_DISTANCE']<5) * (dot_skims['SOV_FREE_DISTANCE']<5),,1,,,,,,,,,,,,,
SOVPAY - Joint tour and number of participants == 2,is_joint & (number_of_participants == 2),,-999,,,,,,,,,,,,,
SOVPAY - Joint tour and number of participants > 2,is_joint & (number_of_participants > 2),,-999,,,,,,,,,,,,,
SOVPAY - Tour purpose is shopping,@coef_da_tourPur_Shp * (df.is_shopping),,1,,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
# HOV2FREE,,,,,,,,,,,,,,,,
HOV2FREE - In-vehicle time,@coef_ivt*(odt_skims['HOV2_FREE_TIME']+dot_skims['HOV2_FREE_TIME']),,,1,,,,,,,,,,,,
HOV2FREE - Operating cost,@df.coef_cost*(costPerMile*(odt_skims['HOV2_FREE_DISTANCE']+dot_skims['HOV2_FREE_DISTANCE'])+100*odt_skims['HOV2_FREE_TOLL']+100*dot_skims['HOV2_FREE_TOLL']),,,1,,,,,,,,,,,,
HOV2FREE - Parking cost  (Need to apply CT RAMP Filter - (@freeParking==2)),@df.pay_to_park * df.coef_cost * cost_parking * df.PARKRATE * 100,,,1,,,,,,,,,,,,
HOV2FREE - 1 Person household,@coef_hov_hhsize1 * df.is_hhsize1,,,1,,,,,,,,,,,,
HOV2FREE - Child under 16 in the household,@coef_hov_ChU16 * df.is_hh_with_child_less16,,,1,,,,,,,,,,,,
HOV2FREE - Male with children under 16,@coef_hov_mlChU16 * ((df.is_male) & (df.is_hh_with_child_less16)),,,1,,,,,,,,,,,,
HOV2FREE - Female with children under 16,@coef_hov_fmlChU16 * ((df.is_female) & (df.is_hh_with_child_less16)),,,1,,,,,,,,,,,,
HOV2FREE - Male with children age 16+,@coef_hov_mlCh16P * ((df.is_male) & (df.is_hh_with_child_16plus)),,,1,,,,,,,,,,,,
HOV2FREE - Female with children age 16+,@coef_hov_fmlCh16P * ((df.is_female) & (df.is_hh_with_child_16plus)),,,1,,,,,,,,,,,,
HOV2FREE - Tour purpose is escort,@coef_hov_tourPur_Esc * df.is_escort,,,1,,,,,,,,,,,,
HOV2FREE - Joint tour and number of participants == 2,is_joint & (number_of_participants == 2),,,1.068,,,,,,,,,,,,
HOV2FREE - Joint tour and number of participants > 2,is_joint & (number_of_participants > 2),,,-999,,,,,,,,,,,,
HOV2FREE - Tour purpose is eatout,@coef_hov_tourPur_Eat * df.is_eatout,,,1,,,,,,,,,,,,
HOV2FREE - Male adult with children age under 16 in household (see row 181 on non-mandatory),@coef_hov_mlAdChU16 * ((df.is_male) & (df.is_adult) & (df.is_hh_with_child_less16)),,,1,,,,,,,,,,,,
HOV2FREE - Female adult with children age under 16 in household (see row 182 on non-mandatory),@coef_hov_fmlAdChU16 * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16)),,,1,,,,,,,,,,,,
HOV2FREE - Other female adults,@coef_hov_OthfmlAd * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16 == False)),,,1,,,,,,,,,,,,
HOV2FREE - Depart from home before 6 AM (work),@(coef_hov_dep_wk_bef_6) * (df.dep_wk_before_6_am),,,1,,,,,,,,,,,,
HOV2FREE - Depart from home after 4 PM (work),@(coef_hov_dep_wk_after_4) * (df.dep_wk_after_4_pm),,,1,,,,,,,,,,,,
HOV2FREE - Tour depart before 4 PM (non mandatory and at-work),@(coef_hov_dep_after_4) * (df.dep_after_4_pm),,,1,,,,,,,,,,,,
HOV2FREE - Tour arrive after 7 PM (non-mandatory and at-work),@(coef_hov_arr_after_7) * (df.arr_after_7_pm),,,1,,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#HOV2PAY,,,,,,,,,,,,,,,,
HOV2PAY - Unavailable if toll distance = 0,HOV2_PAY_Available==False,,,,-999,,,,,,,,,,,
HOV2PAY -  In-vehicle time,@coef_ivt*(odt_skims['HOV2_TOLL_TIME']+dot_skims['HOV2_TOLL_TIME']) * (df.HOV2_PAY_Available),,,,1,,,,,,,,,,,
HOV2PAY - Operating cost,@df.coef_cost*(costPerMile*(odt_skims['HOV2_TOLL_DISTANCE']+dot_skims['HOV2_TOLL_DISTANCE'])+100*odt_skims['HOV2_TOLL_TOLL']+100*dot_skims['HOV2_TOLL_TOLL']) * (df.HOV2_PAY_Available),,,,1,,,,,,,,,,,
HOV2PAY - Parking cost,@df.coef_cost * cost_parking * df.PARKRATE * 100 * (df.HOV2_PAY_Available==True),,,,1,,,,,,,,,,,
HOV2PAY - Constant,@coef_ivt*0* (df.HOV2_PAY_Available==True),,,,1,,,,,,,,,,,
HOV2PAY - 1 Person household,@coef_hov_hhsize1 * df.is_hhsize1,,,,1,,,,,,,,,,,
HOV2PAY - Child under 16 in the household,@coef_hov_ChU16 * df.is_hh_with_child_less16,,,,1,,,,,,,,,,,
HOV2PAY - Male with children age under 16,@coef_hov_mlChU16 * ((df.is_male) & (df.is_hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Female with children age under 16,@coef_hov_fmlChU16 * ((df.is_female) & (df.is_hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Male with children age age 16+,@coef_hov_mlCh16P * ((df.is_male) & (df.is_hh_with_child_16plus)),,,,1,,,,,,,,,,,
HOV2PAY - Female with children age age 16+,@coef_hov_fmlCh16P * ((df.is_female) & (df.is_hh_with_child_16plus)),,,,1,,,,,,,,,,,
HOV2PAY - Tour purpose is escort,@coef_hov_tourPur_Esc * df.is_escort,,,,1,,,,,,,,,,,
HOV2PAY - Joint tour and number of participants == 2,is_joint & (number_of_participants == 2),,,,1.068,,,,,,,,,,,
HOV2PAY - Joint tour and number of participants > 2,is_joint & (number_of_participants > 2),,,,-999,,,,,,,,,,,
HOV2PAY - Tour purpose is eatout,@coef_hov_tourPur_Eat * df.is_eatout,,,,1,,,,,,,,,,,
HOV2PAY - Male adult with children age under 16 in household (see row 181 on non-mandatory),@coef_hov_mlAdChU16 * ((df.is_male) & (df.is_adult) & (df.is_hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Female adult with children age under 16 in household (see row 182 on non-mandatory),@coef_hov_fmlAdChU16 * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16)),,,,1,,,,,,,,,,,
HOV2PAY - Other female adults,@coef_hov_OthfmlAd * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16 == False)),,,,1,,,,,,,,,,,
HOV2PAY - Depart from home before 6 AM (work),@(coef_hov_dep_wk_bef_6) * (df.dep_wk_before_6_am),,,,1,,,,,,,,,,,
HOV2PAY - Depart from home after 4 PM (work),@(coef_hov_dep_wk_after_4) * (df.dep_wk_after_4_pm),,,,1,,,,,,,,,,,
HOV2FREE - Tour depart before 4 PM (non mandatory and at-work),@(coef_hov_dep_after_4) * (df.dep_after_4_pm),,,,1,,,,,,,,,,,
HOV2FREE - Tour arrive after 7 PM (non-mandatory and at-work),@(coef_hov_arr_after_7) * (df.arr_after_7_pm),,,,1,,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#HOV3+FREE,,,,,,,,,,,,,,,,
HOV3+FREE - In-vehicle time,@coef_ivt*(odt_skims['HOV3_FREE_TIME']+dot_skims['HOV3_FREE_TIME']),,,,,1,,,,,,,,,,
HOV3+FREE - Operating cost,@df.coef_cost*(costPerMile*(odt_skims['HOV3_FREE_DISTANCE']+dot_skims['HOV3_FREE_DISTANCE'])+100*odt_skims['HOV3_FREE_TOLL']+100*dot_skims['HOV3_FREE_TOLL']),,,,,1,,,,,,,,,,
HOV3+FREE - Parking cost,@df.coef_cost * cost_parking * df.PARKRATE * 100,,,,,1,,,,,,,,,,
HOV3+FREE - 1 Person household,@coef_hov_hhsize1 * df.is_hhsize1,,,,,1,,,,,,,,,,
HOV3+FREE - Child under 16 in the household,@coef_hov_ChU16 * df.is_hh_with_child_less16,,,,,1,,,,,,,,,,
HOV3+FREE - Male with children age under 16,@coef_hov_mlChU16 * ((df.is_male) & (df.is_hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Female with children age under 16,@coef_hov_fmlChU16 * ((df.is_female) & (df.is_hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Male with children age 16+,@coef_hov_mlCh16P * ((df.is_male) & (df.is_hh_with_child_16plus)),,,,,1,,,,,,,,,,
HOV3+FREE - Female with children age 16+,@coef_hov_fmlCh16P * ((df.is_female) & (df.is_hh_with_child_16plus)),,,,,1,,,,,,,,,,
HOV3+FREE - Tour purpose is escort,@coef_hov_tourPur_Esc * df.is_escort,,,,,1,,,,,,,,,,
HOV3+FREE- Tour purpose is eatout,@coef_hov_tourPur_Eat * df.is_eatout,,,,,1,,,,,,,,,,
HOV3+FREE - Male adult with person under 16 in household,@coef_hov_mlAdChU16 * ((df.is_male) & (df.is_adult) & (df.is_hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Female adult with person under 16 in household,@coef_hov_fmlAdChU16 * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16)),,,,,1,,,,,,,,,,
HOV3+FREE - Other female adults,@coef_hov_OthfmlAd * ((df.is_adult) & (df.is_adult) & (df.is_hh_with_child_less16 == False)),,,,,1,,,,,,,,,,
HOV3+FREE - Depart from home before 6 AM (work),@(coef_hov_dep_wk_bef_6) * (df.dep_wk_before_6_am),,,,,1,,,,,,,,,,
HOV3+FREE - Depart from home after 4 PM (work),@(coef_hov_dep_wk_after_4) * (df.dep_wk_after_4_pm),,,,,1,,,,,,,,,,
HOV3FREE - Tour depart before 4 PM (non mandatory and at-work),@(coef_hov_dep_after_4) * (df.dep_after_4_pm),,,,,1,,,,,,,,,,
HOV3FREE - Tour arrive after 7 PM (non-mandatory and at-work),@(coef_hov_arr_after_7) * (df.arr_after_7_pm),,,,,1,,,,,,,,,,
#,,,,,,,,,,,,,,,,
#HOV3+PAY,,,,,,,,,,,,,,,,
#HOV3_PAY_Available,,,,,,,,,,,,,,,,
HOV3+PAY - Unavailable if toll distance = 0,HOV3_PAY_Available==False,,,,,,-999,,,,,,,,,
HOV3+PAY - In-vehicle time,@coef_ivt*(odt_skims['HOV3_TOLL_TIME']+dot_skims['HOV3_TOLL_TIME']) * (df.HOV3_PAY_Available),,,,,,1,,,,,,,,,
HOV3+PAY - Operating cost,@df.coef_cost*(costPerMile*(odt_skims['HOV3_TOLL_DISTANCE']+dot_skims['HOV3_TOLL_DISTANCE'])+100*odt_skims['HOV3_TOLL_TOLL']+100*dot_skims['HOV3_TOLL_TOLL']) * (df.HOV3_PAY_Available),,,,,,1,,,,,,,,,
HOV3+PAY - Parking cost,@df.coef_cost * cost_parking * df.PARKRATE * 100 * (df.HOV3_PAY_Available),,,,,,1,,,,,,,,,
HOV3+PAY - Pay constant,@coef_ivt * 0 * (df.HOV3_PAY_Available==True),,,,,,1,,,,,,,,,
HOV3+PAY - 1 person household,@coef_hov_hhsize1 * df.is_hhsize1,,,,,,1,,,,,,,,,
HOV3+PAY - Child under 16 in the household,@coef_hov_ChU16 * df.is_hh_with_child_less16,,,,,,1,,,,,,,,,
HOV3+PAY - Male with children age under 16,@coef_hov_mlChU16 * ((df.is_male) & (df.is_hh_with_child_less16)),,,,,,1,,,,,,,,,
HOV3+PAY - Female with children age under 16,@coef_hov_fmlChU16 * ((df.is_female) & (df.is_hh_with_child_less16)),,,,,,1,,,,,,,,,
HOV3+PAY - Male with children age 16+,@coef_hov_mlCh16P * ((df.is_male) & (df.is_hh_with_child_16plus)),,,,,,1,,,,,,,,,
HOV3+PAY - Female with children age 16+,@coef_hov_fmlCh16P * ((df.is_female) & (df.is_hh_with_child_16plus)),,,,,,1,,,,,,,,,
HOV3+PAY - Tour purpose is escort,@coef_hov_tourPur_Esc * df.is_escort,,,,,,1,,,,,,,,,
HOV3+PAY - Tour purpose is eatout,@coef_hov_tourPur_Eat * df.is_eatout,,,,,,1,,,,,,,,,
HOV3+PAY - Male adult with children age under 16 in household,@coef_hov_mlAdChU16 * ((df.is_male) & (df.is_adult) & (df.is_hh_with_child_less16)),,,,,,1,,,,,,,,,
HOV3+PAY - Female adult withchildren age under 16 in household,@coef_hov_fmlAdChU16 * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16)),,,,,,1,,,,,,,,,
HOV3+PAY - Other female adults,@coef_hov_OthfmlAd * ((df.is_female) & (df.is_adult) & (df.is_hh_with_child_less16 == False)),,,,,,1,,,,,,,,,
HOV3+PAY - Depart from home before 6 AM (work),@(coef_hov_dep_wk_bef_6) * (df.dep_wk_before_6_am),,,,,,1,,,,,,,,,
HOV3+PAY - Depart from home after 4 PM (work),@(coef_hov_dep_wk_after_4) * (df.dep_wk_after_4_pm),,,,,,1,,,,,,,,,
HOV3+PAY - Tour depart before 4 PM (non mandatory and at-work),@(coef_hov_dep_after_4) * (df.dep_after_4_pm),,,,,,1,,,,,,,,,
HOV3+PAY - Tour arrive after 7 PM (non-mandatory and at-work),@(coef_hov_arr_after_7) * (df.arr_after_7_pm),,,,,,1,,,,,,,,,
#,,,,,,,,,,,,,,,,
#Walk,,,,,,,,,,,,,,,,
WALK -  Unavailable,WalkModeAvailable==False,,,,,,,-999,,,,,,,,
WALK - Time -- up to 2/3 mile,"@coef_walkTimeShort*np.minimum(((odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/walkSpeed),(walkThresh*60/walkSpeed*2))*(df.WalkModeAvailable)",,,,,,,1,,,,,,,,
WALK - Time -- beyond 2/3 mile,"@coef_walkTimeLong*np.maximum(((odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/walkSpeed - walkThresh*60/walkSpeed*2),0)*(df.WalkModeAvailable)",,,,,,,1,,,,,,,,
WALK - Person's age less than 40,@coef_nm_U40 * (df.is_ageless40),,,,,,,1,,,,,,,,
WALK - Person is male,@coef_nm_male * df.is_male,,,,,,,1,,,,,,,,
WALK - Person is university student,@coef_nm_UnvStudent * df.is_university,,,,,,,1,,,,,,,,
WALK - Household income is less than 50K,@coef_nm_incLess50K * df.is_income_less50K,,,,,,,1,,,,,,,,
WALK - Very high household income,@coef_nm_incVeryhigh * df.is_very_high_income,,,,,,,1,,,,,,,,
WALK - No income reported,@coef_nm_noIncome * df.is_no_income,,,,,,,1,,,,,,,,
WALK - Person's age 60+,@coef_nm_60plus * df.is_age60plus,,,,,,,1,,,,,,,,
"WALK - Tour purpose is eatout, social or other discretionary",@coef_nm_torPurEatSocODis * (df.is_eatout) + coef_nm_torPurEatSocODis * (df.is_social) + coef_nm_torPurEatSocODis * (df.is_othdiscr),,,,,,,1,,,,,,,,
WALK - Intrazonal,@coef_nm_intrazonal * (df.is_intrazonal),,,,,,,1,,,,,,,,
#,,,,,,,,,,,,,,,,
#Bike,,,,,,,,,,,,,,,,
BIKE - Unavailable,BikeModeAvailable==False,,,,,,,,-999,,,,,,,
BIKE - Time,@coef_bikeTime*(odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/bikeSpeed * (df.BikeModeAvailable),,,,,,,,1,,,,,,,
BIKE - Person's age lesss than 40,@coef_nm_U40 * (df.is_ageless40),,,,,,,,1,,,,,,,
BIKE - Person is male,@coef_nm_male * df.is_male,,,,,,,,1,,,,,,,
BIKE -  Person is university student,@coef_nm_UnvStudent * df.is_university,,,,,,,,1,,,,,,,
BIKE - Household income is less than 50K,@coef_nm_incLess50K * df.is_income_less50K,,,,,,,,1,,,,,,,
BIKE - Very high household income,@coef_nm_incVeryhigh * df.is_very_high_income,,,,,,,,1,,,,,,,
BIKE - No income reported,@coef_nm_noIncome * df.is_no_income,,,,,,,,1,,,,,,,
BIKE - Person's age 60+,@coef_nm_60plus * df.is_age60plus,,,,,,,,1,,,,,,,
"BIKE - Tour purpose is eatout, social or recreational",@coef_nm_torPurEatSocODis * (df.is_eatout) + coef_nm_torPurEatSocODis * (df.is_social) + coef_nm_torPurEatSocODis * (df.is_othdiscr),,,,,,,,1,,,,,,,
BIKE - Intrazonal,@coef_nm_intrazonal * (df.is_intrazonal),,,,,,,,1,,,,,,,
#,,,,,,,,,,,,,,,,
# Walk to Non-premium Transit,,,,,,,,,,,,,,,,
WLKALL - Unavailable,WalkAllTransitAvailable==False,,,,,,,,,-999,,,,,,
WLKALL - In-vehicle time,@coef_ivt * (df.WalkAllTotalIVT_out+df.WalkAllTotalIVT_ret)*(df.WalkAllTransitAvailable),,,,,,,,,1,,,,,,
WLKALL - First wait time -- up to 7.5 minutes,"@coef_firstWaitShort*np.minimum((odt_skims['WLK_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_WLK_IWAIT']),firstWaitThresh*2)*(df.WalkAllTransitAvailable)",,,,,,,,,1,,,,,,
WLKALL - First wait time -- in excess of 7.5 minutes,"@coef_firstWaitLong*np.maximum(((odt_skims['WLK_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_WLK_IWAIT']) - firstWaitThresh*2),0)*(df.WalkAllTransitAvailable)",,,,,,,,,1,,,,,,
WLKALL - Transfer wait time,@coef_xferWait*(odt_skims['WLK_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_WLK_XWAIT']+odt_skims['WLK_ALLTRN_WLK_XPEN']+dot_skims['WLK_ALLTRN_WLK_XPEN'])*(df.WalkAllTransitAvailable),,,,,,,,,1,,,,,,
WLKALL - Walk time -- up to 2/3 mile,"@coef_walkTimeShort * np.minimum ((odt_skims['WLK_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_WLK_WALK']), walkThresh*60/walkSpeed*2)*(df.WalkAllTransitAvailable)",,,,,,,,,1,,,,,,
WLKALL - Walk time -- beyond 2/3 mile,"@coef_walkTimeLong * np.maximum(((odt_skims['WLK_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_WLK_WALK'])- walkThresh*60/walkSpeed*2),0) *(df.WalkAllTransitAvailable)",,,,,,,,,1,,,,,,
WLKALL - Fare,@df.coef_cost*(odt_skims['WLK_ALLTRN_WLK_FARE']+dot_skims['WLK_ALLTRN_WLK_FARE'])*100*(df.WalkAllTransitAvailable),,,,,,,,,1,,,,,,
WLKALL - Income less than 50k,@coef_wlkTran_incLess50K * df.is_income_less50K,,,,,,,,,1,,,,,,
WLKALL - University student,@coef_wlkTran_UnvStudent * df.is_university,,,,,,,,,1,,,,,,
WLKALL - Nonworking adult,@coef_wlkTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,1,,,,,,
WLKALL - Person's age 60+,@coef_wlkTran_age60 * df.is_age60plus,,,,,,,,,1,,,,,,
WLKALL - MARTA constant,"@coef_ivt*np.minimum((odt_skims['WLK_ALLTRN_WLK_HRT']+dot_skims['WLK_ALLTRN_WLK_HRT']),30)*(-1)*(0.1)",,,,,,,,,1,,,,,,
WLKALL - Transit short distance disutility,"@coef_ivt*np.minimum(np.maximum((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2,0),30*2)",,,,,,,,,1,,,,,,
#,,,,,,,,,,,,,,,,
#Walk to Premium Transit,,,,,,,,,,,,,,,,
WLKPRM - Unavailable,WalkPrmTransitAvailable==False,,,,,,,,,,-999,,,,,
WLKPRM - In-vehicle time,@coef_ivt*(df.WalkPrmTotalIVT_out+df.WalkPrmTotalIVT_ret)*(df.WalkPrmTransitAvailable),,,,,,,,,,1,,,,,
WLKPRM - First wait time -- up to 7.5 minutes,"@coef_firstWaitShort*np.minimum((odt_skims['WLK_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_WLK_IWAIT']),firstWaitThresh*2)*(df.WalkPrmTransitAvailable)",,,,,,,,,,1,,,,,
WLKPRM - First wait time -- in excess of 7.5 minutes,"@coef_firstWaitLong*np.maximum(((odt_skims['WLK_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_WLK_IWAIT']) - firstWaitThresh*2),0)*(df.WalkPrmTransitAvailable)",,,,,,,,,,1,,,,,
WLKPRM - Transfer wait time,@coef_xferWait*(odt_skims['WLK_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_WLK_XWAIT']+odt_skims['WLK_PRMTRN_WLK_XPEN']+dot_skims['WLK_PRMTRN_WLK_XPEN'])*(df.WalkPrmTransitAvailable),,,,,,,,,,1,,,,,
WLKPRM - Walk time -- up to 2/3 mile,"@coef_walkTimeShort * np.minimum ((odt_skims['WLK_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_WLK_WALK']), walkThresh*60/walkSpeed*2)*(df.WalkPrmTransitAvailable)",,,,,,,,,,1,,,,,
WLKPRM - Walk time -- beyond 2/3 mile,"@coef_walkTimeLong * np.maximum (((odt_skims['WLK_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_WLK_WALK'])- walkThresh*60/walkSpeed*2),0)*(df.WalkPrmTransitAvailable)",,,,,,,,,,1,,,,,
WLKPRM - Fare,@df.coef_cost*(odt_skims['WLK_PRMTRN_WLK_FARE']+dot_skims['WLK_PRMTRN_WLK_FARE'])*100*(df.WalkPrmTransitAvailable),,,,,,,,,,1,,,,,
WLKPRM  - Income less than 50k,@coef_wlkTran_incLess50K * df.is_income_less50K,,,,,,,,,,1,,,,,
WLKPRM  - University student,@coef_wlkTran_UnvStudent * df.is_university,,,,,,,,,,1,,,,,
WLKPRM  - Nonworking adult,@coef_wlkTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,1,,,,,
WLKPRM - Person age 60+,@coef_wlkTran_age60 * df.is_age60plus,,,,,,,,,,1,,,,,
WLKPRM - MARTA constant,"@coef_ivt*np.minimum((odt_skims['WLK_PRMTRN_WLK_HRT']+dot_skims['WLK_PRMTRN_WLK_HRT']), 30)*(-1)*(0.1)",,,,,,,,,,1,,,,,
WLKPRM - Transit short distance disutility,"@coef_ivt*np.minimum(np.maximum((-3*odt_skims['SOV_FREE_DISTANCE']+40)*2,0),30*2)",,,,,,,,,,1,,,,,
#,,,,,,,,,,,,,,,,
#PNR to Non-premium Transit,,,,,,,,,,,,,,,,
PNRALL - Unavailable,PNRAllTransitAvailable==False,,,,,,,,,,,-999,,,,
PNRALL - In-vehicle time,@coef_ivt * (df.PNRALLTotalIVT)*(df.PNRAllTransitAvailable),,,,,,,,,,,1,,,,
PNRALL - First wait time -- up to 7.5 minutes,"@coef_firstWaitShort*np.minimum((odt_skims['PNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_PNR_IWAIT']),firstWaitThresh*2)*(df.PNRAllTransitAvailable)",,,,,,,,,,,1,,,,
PNRALL - First wait time -- in excess of 7.5 minutes,"@coef_firstWaitLong*np.maximum(((odt_skims['PNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_PNR_IWAIT']) - firstWaitThresh*2),0)*(df.PNRAllTransitAvailable)",,,,,,,,,,,1,,,,
PNRALL - Transfer wait time,@coef_xferWait*(odt_skims['PNR_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_PNR_XWAIT']+odt_skims['PNR_ALLTRN_WLK_XPEN']+dot_skims['WLK_ALLTRN_PNR_XPEN'])*(df.PNRAllTransitAvailable),,,,,,,,,,,1,,,,
PNRALL - Walk time -- up to 2/3 mile,"@coef_walkTimeShort * np.minimum((odt_skims['PNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_PNR_WALK']), walkThresh*60/walkSpeed*2)*(df.PNRAllTransitAvailable)",,,,,,,,,,,1,,,,
PNRALL - Walk time -- beyond 2/3 mile,"@coef_walkTimeLong * np.maximum(((odt_skims['PNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_PNR_WALK']) - walkThresh*60/walkSpeed*2),0)*(df.PNRAllTransitAvailable)",,,,,,,,,,,1,,,,
PNRALL - Transfer penalty,@coef_ivt*10.0*((odt_skims['PNR_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_PNR_XWAIT'])>0)*(df.PNRAllTransitAvailable),,,,,,,,,,,1,,,,
PNRALL - Drive time,@coef_pnrTime * (odt_skims['PNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_PNR_AUTO'])*(df.PNRAllTransitAvailable),,,,,,,,,,,1,,,,
PNRALL - Cost,@df.coef_cost*((odt_skims['PNR_ALLTRN_WLK_FARE']+dot_skims['WLK_ALLTRN_PNR_FARE'])*100+(odt_skims['PNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_PNR_AUTO'])*20/60*costPerMile)*(df.PNRAllTransitAvailable),,,,,,,,,,,1,,,,
PNRALL - Non-working adult,@coef_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,1,,,,
PNRALL - MARTA constant,"@coef_ivt*np.minimum((df.PNRHRTAllTransit_out+df.PNRHRTAllTransit_ret), 30)*(-1)*(0.1)",,,,,,,,,,,1,,,,
PNRALL - Transit short distance disutility,"@coef_ivt*np.minimum(np.maximum((-4*odt_skims['SOV_FREE_DISTANCE']+70),0),60)",,,,,,,,,,,1,,,,
#,,,,,,,,,,,,,,,,
#PNR to Premium Transit,,,,,,,,,,,,,,,,
PNRPRM - Unavailable,PNRPrmTransitAvailable==False,,,,,,,,,,,,-999,,,
PNRPRM - In-vehicle time,@coef_ivt * (df.PNRPrmTotalIVT)*(df.PNRPrmTransitAvailable),,,,,,,,,,,,1,,,
PNRPRM - First wait time -- up to 7.5 minutes,"@coef_firstWaitShort*np.minimum((odt_skims['PNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_PNR_IWAIT']), firstWaitThresh*2)*(df.PNRPrmTransitAvailable)",,,,,,,,,,,,1,,,
PNRPRM - First wait time -- in access of 7.5 minutes,"@coef_firstWaitLong*np.maximum(((odt_skims['PNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_PNR_IWAIT']) - firstWaitThresh*2),0)*(df.PNRPrmTransitAvailable)",,,,,,,,,,,,1,,,
PNRPRM -Transfer wait time,@coef_xferWait*(odt_skims['PNR_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_PNR_XWAIT']+odt_skims['PNR_PRMTRN_WLK_XPEN']+dot_skims['WLK_PRMTRN_PNR_XPEN'])*(df.PNRPrmTransitAvailable),,,,,,,,,,,,1,,,
PNRPRM - Walk time -- up to 2/3 mile,"@coef_walkTimeShort * np.minimum((odt_skims['PNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_PNR_WALK']),walkThresh*60/walkSpeed*2)*(df.PNRPrmTransitAvailable)",,,,,,,,,,,,1,,,
PNRPRM - Walk time -- beyond 2/3 mile,"@coef_walkTimeLong * np.maximum(((odt_skims['PNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_PNR_WALK']) - walkThresh*60/walkSpeed*2),0)*(df.PNRPrmTransitAvailable)",,,,,,,,,,,,1,,,
PNRPRM - Transfer penalty,@coef_ivt*10.0*((odt_skims['PNR_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_PNR_XWAIT'])>0)*(df.PNRPrmTransitAvailable),,,,,,,,,,,,1,,,
PNRPRM  - Drive time,@coef_pnrTime * (odt_skims['PNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_PNR_AUTO'])*(df.PNRPrmTransitAvailable),,,,,,,,,,,,1,,,
PNRPRM  - Cost,@df.coef_cost*((odt_skims['PNR_PRMTRN_WLK_FARE']+dot_skims['WLK_PRMTRN_PNR_FARE'])*100+(odt_skims['PNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_PNR_AUTO'])*20/60*costPerMile)*(df.PNRPrmTransitAvailable),,,,,,,,,,,,1,,,
PNRPRM - Non-working adult,@coef_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,1,,,
PNRPRM - MARTA constant,"@coef_ivt*np.minimum((df.PNRHRTPremium_out+df.PNRHRTPremium_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,1,,,
PNRPRM - Transit short distance disutility,"@coef_ivt*np.minimum(np.maximum((-4*odt_skims['SOV_FREE_DISTANCE']+70),0),60)",,,,,,,,,,,,1,,,
PNRPRM - Drive constant,@coef_ivt*-17.5,,,,,,,,,,,,1,,,
#,,,,,,,,,,,,,,,,
#KNR to Non-premium Transit,,,,,,,,,,,,,,,,
KNRALL - Unavailable,KNRAllTransitAvailable==False,,,,,,,,,,,,,-999,,
KNRALL  - In-vehicle time,@coef_ivt * (df.KNRALLTotalIVT)*(df.KNRAllTransitAvailable),,,,,,,,,,,,,1,,
KNRALL  - First wait time -- up to 7.5 minutes,"@coef_firstWaitShort*np.minimum((odt_skims['KNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_KNR_IWAIT']),firstWaitThresh*2)*(df.KNRAllTransitAvailable)",,,,,,,,,,,,,1,,
KNRALL  - First wait time -- in excess of 7.5 minutes,"@coef_firstWaitLong*np.maximum(((odt_skims['KNR_ALLTRN_WLK_IWAIT']+dot_skims['WLK_ALLTRN_KNR_IWAIT']) - firstWaitThresh*2),0)*(df.KNRAllTransitAvailable)",,,,,,,,,,,,,1,,
KNRALL - Transfer wait time,@coef_xferWait*(odt_skims['KNR_ALLTRN_WLK_XWAIT']+dot_skims['WLK_ALLTRN_KNR_XWAIT'])*(df.KNRAllTransitAvailable),,,,,,,,,,,,,1,,
KNRALL - Walk time -- up to 2/3 mile,"@coef_walkTimeShort * np.minimum((odt_skims['KNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_KNR_WALK']), walkThresh*60/walkSpeed*2)*(df.KNRAllTransitAvailable)",,,,,,,,,,,,,1,,
KNRALL - Walk time -- beyond 2/3 mile,"@coef_walkTimeLong * np.maximum(((odt_skims['KNR_ALLTRN_WLK_WALK']+dot_skims['WLK_ALLTRN_KNR_WALK']) - walkThresh*60/walkSpeed*2) ,0)*(df.KNRAllTransitAvailable)",,,,,,,,,,,,,1,,
KNRALL - Drive time,@coef_knrTime * (odt_skims['KNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_KNR_AUTO'])*(df.KNRAllTransitAvailable),,,,,,,,,,,,,1,,
KNRALL - Cost,@df.coef_cost*((odt_skims['KNR_ALLTRN_WLK_FARE']+dot_skims['WLK_ALLTRN_KNR_FARE'])*100+(odt_skims['KNR_ALLTRN_WLK_AUTO']+dot_skims['WLK_ALLTRN_KNR_AUTO'])*20/60*costPerMile)*(df.KNRAllTransitAvailable),,,,,,,,,,,,,1,,
KNRALL - Non-working adult,@coef_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,,1,,
KNRALL - MARTA constant,"@coef_ivt*np.minimum((df.KNRHRTAllTransit_out+df.KNRHRTAllTransit_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,,1,,
KNRALL - Transit short distance disutility,"@coef_ivt*np.minimum(np.maximum((-4*odt_skims['SOV_FREE_DISTANCE']+70),0),60)",,,,,,,,,,,,,1,,
#,,,,,,,,,,,,,,,,
#KNR to Premium Transit,,,,,,,,,,,,,,,,
KNRPRM - Unavailable,KNRPrmTransitAvailable==False,,,,,,,,,,,,,,-999,
KNRPRM - In-vehicle time,@coef_ivt * (df.KNRPrmTotalIVT)*(df.KNRPrmTransitAvailable),,,,,,,,,,,,,,1,
KNRPRM - First wait time -- up to 7.5 minutes,"@coef_firstWaitShort*np.minimum((odt_skims['KNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_KNR_IWAIT']), firstWaitThresh*2)*(df.KNRPrmTransitAvailable)",,,,,,,,,,,,,,1,
KNRPRM - First wait time -- in excess of 7.5 minutes,"@coef_firstWaitLong*np.maximum(((odt_skims['KNR_PRMTRN_WLK_IWAIT']+dot_skims['WLK_PRMTRN_KNR_IWAIT']) - firstWaitThresh*2),0)*(df.KNRPrmTransitAvailable)",,,,,,,,,,,,,,1,
KNRPRM - Transfer wait time,@coef_xferWait*(odt_skims['KNR_PRMTRN_WLK_XWAIT']+dot_skims['WLK_PRMTRN_KNR_XWAIT'])*(df.KNRPrmTransitAvailable),,,,,,,,,,,,,,1,
KNRPRM - Walk time -- up to 2/3 mile,"@coef_walkTimeShort * np.minimum((odt_skims['KNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_KNR_WALK']),(walkThresh*60/walkSpeed*2))*(df.KNRPrmTransitAvailable)",,,,,,,,,,,,,,1,
KNRPRM - Walk time -- beyond 2/3 mile,"@coef_walkTimeLong * np.maximum(((odt_skims['KNR_PRMTRN_WLK_WALK']+dot_skims['WLK_PRMTRN_KNR_WALK']) - walkThresh*60/walkSpeed*2),0)*(df.KNRPrmTransitAvailable)",,,,,,,,,,,,,,1,
KNRPRM - Drive time,@coef_knrTime * (odt_skims['KNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_KNR_AUTO'])*(df.KNRPrmTransitAvailable),,,,,,,,,,,,,,1,
KNRPRM - Cost,@df.coef_cost*((odt_skims['KNR_PRMTRN_WLK_FARE']+dot_skims['WLK_PRMTRN_KNR_FARE'])*100+(odt_skims['KNR_PRMTRN_WLK_AUTO']+dot_skims['WLK_PRMTRN_KNR_AUTO'])*20/60*costPerMile)*(df.KNRPrmTransitAvailable),,,,,,,,,,,,,,1,
KNRPRM - Non-working adult,@coef_drvTran_nonWrkAdlt * df.is_nonworker_adult,,,,,,,,,,,,,,1,
KNRPRM - MARTA constant,"@coef_ivt*np.minimum((df.KNRHRTPremium_out+df.KNRHRTPremium_ret), 30)*(-1)*(0.1)",,,,,,,,,,,,,,1,
KNRPRM -Transit short distance disutility,"@coef_ivt*np.minimum(np.maximum((-4*odt_skims['SOV_FREE_DISTANCE']+70),0),60)",,,,,,,,,,,,,,1,
KNRPRM - Premium constant,@coef_ivt*-5.0,,,,,,,,,,,,,,1,
#,,,,,,,,,,,,,,,,
SCHOOLBUS - Mode unavailable,is_school==False,,,,,,,,,,,,,,,-999
SCHOOLBUS - Grade school pre-driver,"@np.where(df.is_school, (coef_schBus_PreDriver * df.is_predrive), 0)",,,,,,,,,,,,,,,1
SCHOOLBUS -  Grade school driver,"@np.where(df.is_school, coef_schBus_Driver * df.is_driving_age, 0)",,,,,,,,,,,,,,,1
SCHOOLBUS - Rural/exurban destination,"@np.where(df.is_school, coef_schBus_Rural * df.is_rural_or_exurban, 0)",,,,,,,,,,,,,,,1
SCHOOLBUS - o/d distance greater than 10 miles,"@np.where(df.is_school, coef_schBus_odDistgre10Mile * (odt_skims['SOV_FREE_DISTANCE']>10), 0)",,,,,,,,,,,,,,,1
SCHOOLBUS - Depart from home before 8 am (downstream model),"@np.where(df.is_school, todOut<2 , 0)",,,,,,,,,,,,,,,
SCHOOLBUS -  Return to home before 5 pm (downstream model),"@np.where(df.is_school, todIn<6, 0)",,,,,,,,,,,,,,,
SCHOOLBUS - In-vehicle time (ERROR-all probabilities are zero for 1204 rows),"@np.where(df.is_school, coef_ivt*(odt_skims['SOV_FREE_DISTANCE']+dot_skims['SOV_FREE_DISTANCE'])*60/schoolBusSpeed, 0)",,,,,,,,,,,,,,,1
SCHOOLBUS - Out-of-vehicle time,"@np.where(df.is_school, coef_ovt*schoolBusOvt, 0)",,,,,,,,,,,,,,,1
#,,,,,,,,,,,,,,,,
CBD Transit Constant,@coef_ivt * (CBD_sub) * (df.destination_in_cbd),,,,,,,,,1,1,1,1,1,1,
#,,,,,,,,,,,,,,,,
"# Calibration Constants (work,university,school,at work - they differ by purpose)",,,,,,,,,,1,1,1,1,,,
"# For now, only work purpose constants are inserted here",,,,,,,,,,,,,,,,
Calibration: 0 Autos (work),(is_work) & (auto_ownership == 0),,,,,-0.816120219,-0.816120219,1.990089057,-999,8.593788329,7.66605407,-999,-999,4.791608079,4.471656615,
Calibration: Auto insufficient (work),(is_work) & ((auto_ownership>0) & (auto_ownership<num_workers)),,,-0.63800247,-0.63800247,-1.438648304,-1.438648304,-0.996720964,-2.45065927,2.804676361,3.566794866,0.483522163,0.545309618,0.830434421,0.889562862,
Calibration: Auto sufficient (work),(is_work) & ((auto_ownership>0) & (auto_ownership>=num_workers)),,,-1.36341359,-1.36341359,-1.81041696,-1.81041696,-2.654639366,-3.336721692,-0.170499533,0.918330131,-1.087611213,-0.546994292,-1.587459956,-1.225559131,
Calibration: 0 Autos (university),(is_university) & (auto_ownership == 0),,,,,-373.8344747,-373.8344747,-361.5964747,2.207505952,13.48834594,14.77428617,-999,-999,11.77408542,14.78303225,
Calibration: Auto insufficient (university),(is_university) & ((auto_ownership>0) & (auto_ownership<num_workers)),,,-0.293572248,-0.293572248,-368.9536483,-368.9536483,-2.899494048,-375.6966483,6.166382203,9.759548884,4.589950044,7.075102483,5.022470372,7.659571811,
Calibration: Auto sufficient (university),(is_university) & ((auto_ownership>0) & (auto_ownership>=num_workers)),,,-0.714895088,-0.714895088,-1.278349035,-1.278349035,-6.82952528,-9.41663632,-0.505158373,1.846171302,0.353170898,2.044382453,0.129623244,2.084562247,
Calibration: 0 Autos (school),(is_school) & (auto_ownership == 0),,,,,-1.000087358,-1.000087358,-1.525018997,-999,-1.430288974,-1.736723655,-999,-999,-0.436767159,-174.5292355,-1.612165537
Calibration: Auto insufficient (school),(is_school) & ((auto_ownership>0) & (auto_ownership<num_workers)),,,1.280839807,1.280839807,1.729847065,1.729847065,-0.20753071,-3.889307181,2.337316255,2.591210916,-178.6894099,2.762835725,1.623014345,2.405785819,-0.267572615
Calibration: Auto sufficient (School),(is_school) & ((auto_ownership>0) & (auto_ownership>=num_workers)),,,-0.96528887,-0.96528887,-0.631156369,-0.631156369,-3.9988617,-6.471719523,-4.557500694,-4.325195587,-123.1516952,-1.241626608,-2.870808442,-2.078685267,-3.847132931
Calibration: 0 Autos (at-work),(is_atwork_subtour) & (auto_ownership == 0),,,,,-999,-999,6.871268643,-999,5.2902692,5.645201333,,,,,
Calibration: Auto insufficient (at-work),(is_atwork_subtour) & ((auto_ownership>0) & (auto_ownership<num_workers)),,,-0.560896437,-0.560896437,-1.913334834,-1.913334834,2.269201941,-2.421173397,1.60945874,1.62112455,,,,,
Calibration: Auto sufficient (at-work),(is_atwork_subtour) & ((auto_ownership>0) & (auto_ownership>=num_workers)),,,-1.904718953,-1.904718953,-2.256102585,-2.256102585,-0.417017535,-6.15444342,-1.431384898,-0.36129991,,,,,
#Calibration Constants  (the followings are for non-mandatory tours),,,,,,,,,,,,,,,,
Calibration IndNM: 0 Autos,~is_mandatory & (auto_ownership == 0) & is_indiv,,,,,-0.675648172,-0.675648172,3.947893425,-1.148463339,4.83098908,4.162297418,-999,-999,1.73797941,2.024568045,
Calibration IndNM: Auto insufficient,~is_mandatory & ((auto_ownership>0) & (auto_ownership<num_workers)) & is_indiv,,,0.693937061,0.693937061,0.347503387,0.347503387,2.548563633,-1.381512325,4.376918628,4.429201789,-177.8805336,2.266723391,2.509887205,3.144516066,
Calibration IndNM: Auto sufficient,~is_mandatory & ((auto_ownership>0) & (auto_ownership>=num_workers)) & is_indiv,,,-0.49130717,-0.49130717,-0.584626521,-0.584626521,1.094250848,-2.635496194,-1.824540557,-2.409524906,-1.891215727,-0.975079474,-3.660130488,-2.277866899,
Calibration Joint NM: 0 Autos,~is_mandatory & (auto_ownership == 0) & is_joint,,,,,1.497076445,1.497076445,6.827698725,-999,7.917116967,6.763727705,-999,-999,6.177242271,-364.7960878,
Calibration Joint NM: Auto insufficient,~is_mandatory & ((auto_ownership>0) & (auto_ownership<num_workers)) & is_joint,,,-0.433185937,-0.433185937,-1.793324411,-1.793324411,2.107019106,-999,2.135441007,2.338516019,-333.024706,-333.024706,-174.0928375,-368.8393011,
 Calibration Joint NM: Auto sufficient,~is_mandatory & ((auto_ownership>0) & (auto_ownership>=num_workers)) & is_joint,,,0.668452181,0.668452181,0.62809826,0.62809826,1.922773568,-2.517787655,-1.070271277,-0.151651879,-326.9779548,0.243683509,-1.486590388,-365.157632,
#,,,,,,,,,,,,,,,,
#Income (probably used in calibration),,,,,,,,,,,,,,,,
Inc < 10000 (apply to only home zone),(is_income_less10K) * (Inc_PCTLT10K),,,,,,,,,16,16,,,14,14,
Inc 10k to 20k (apply to only home zone),(is_income_10K_20K) * (Inc_PCT10TO20),,,,,,,,,8,8,,,6,6,
Inc 20k to 40k (apply to only home zone),(is_income_20K_40K) * (Inc_PCT20TO40),,,,,,,,,1,1,,,1,1,
