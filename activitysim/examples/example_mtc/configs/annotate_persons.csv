Description,Target,Expression
#,, annotate persons table after import
age_16_to_19,age_16_to_19,"persons.age.between(16, 19)"
age_16_p,age_16_p,persons.age >= 16
adult,adult,persons.age >= 18
male,male,persons.sex == 1
female,female,persons.sex == 2
presence of non_worker other than self in household,has_non_worker,"other_than(persons.household_id, persons.ptype == constants.PTYPE_NONWORK)"
presence of retiree other than self in household,has_retiree,"other_than(persons.household_id, persons.ptype == constants.PTYPE_RETIRED)"
presence of preschooler other than self in household,has_preschool_kid,"other_than(persons.household_id, persons.ptype == constants.PTYPE_PRESCHOOL)"
presence of driving_kid other than self in household,has_driving_kid,"other_than(persons.household_id, persons.ptype == constants.PTYPE_DRIVING)"
presence of school_kid other than self in household,has_school_kid,"other_than(persons.household_id, persons.ptype == constants.PTYPE_SCHOOL)"
presence of full_time worker other than self in household (independent of person type),has_full_time,"other_than(persons.household_id, persons.pemploy==constants.PEMPLOY_FULL)"
presence of part_time worker other than self in household (independent of person type),has_part_time,"other_than(persons.household_id, persons.pemploy==constants.PEMPLOY_PART)"
presence of university student other than self in household,has_university,"other_than(persons.household_id, persons.ptype == constants.PTYPE_UNIVERSITY)"
student_is_employed,student_is_employed,"(persons.ptype.isin([constants.PTYPE_UNIVERSITY, constants.PTYPE_DRIVING]) & persons.pemploy.isin([constants.PEMPLOY_FULL, constants.PEMPLOY_PART]))"
nonstudent_to_school,nonstudent_to_school,"(persons.ptype.isin([constants.PTYPE_FULL, constants.PTYPE_PART, constants.PTYPE_NONWORK, constants.PTYPE_RETIRED]) & persons.pstudent.isin([constants.PSTUDENT_GRADE_OR_HIGH, constants.PSTUDENT_UNIVERSITY]))"
#,,
#,, FIXME - if person is a university student but has school age student category value then reset student category value
,pstudent,"persons.pstudent.where(persons.ptype!=constants.PTYPE_UNIVERSITY, constants.PSTUDENT_UNIVERSITY)"
#,, FIXME if person is a student of any kind but has full-time employment status then reset student category value to non-student
,pstudent,"pstudent.where(persons.ptype!=constants.PTYPE_FULL, constants.PSTUDENT_NOT)"
#,, FIXME if student category is non-student and employment is student then reset student category value to student
,pstudent,"pstudent.where((persons.ptype!=constants.PTYPE_DRIVING) & (persons.ptype!=constants.PTYPE_SCHOOL), constants.PSTUDENT_GRADE_OR_HIGH)"
#,,
is_student,is_student,"pstudent.isin([constants.PSTUDENT_GRADE_OR_HIGH, constants.PSTUDENT_UNIVERSITY])"
preschool age can go to preschool,is_student,"is_student.where(persons.age > constants.GRADE_SCHOOL_MIN_AGE, True)"
preschool age can go to preschool,pstudent,"pstudent.where(persons.age > constants.GRADE_SCHOOL_MIN_AGE, constants.PSTUDENT_GRADE_OR_HIGH)"
is_gradeschool,is_gradeschool,(pstudent == constants.PSTUDENT_GRADE_OR_HIGH) & (persons.age <= constants.GRADE_SCHOOL_MAX_AGE)
is_highschool,is_highschool,(pstudent == constants.PSTUDENT_GRADE_OR_HIGH) & (persons.age > constants.GRADE_SCHOOL_MAX_AGE)
is_university,is_university,pstudent == constants.PSTUDENT_UNIVERSITY
school_segment gradeschool,school_segment,"np.where(is_gradeschool, constants.SCHOOL_SEGMENT_GRADE, constants.SCHOOL_SEGMENT_NONE)"
school_segment highschool,school_segment,"np.where(is_highschool, constants.SCHOOL_SEGMENT_HIGH, school_segment)"
school_segment university,school_segment,"np.where(is_university, constants.SCHOOL_SEGMENT_UNIV, school_segment).astype(np.int8)"
#,,
is_worker,is_worker,"persons.pemploy.isin([constants.PEMPLOY_FULL, constants.PEMPLOY_PART])"
#,,
home_taz,home_taz,"reindex(households.TAZ, persons.household_id)"
