Description,Expression,DRIVEALONE,SHARED2,SHARED3,WALK,BIKE,WALK_LOC,WALK_PRM,WALK_MIX,PNR_LOC,PNR_PRM,PNR_MIX,KNR_LOC,KNR_PRM,KNR_MIX,SCHOOLBUS,TAXI,TNC_SINGLE,TNC_SHARED
#Drive alone no toll,,,,,,,,,,,,,,,,,,,
DRIVEALONE - Unavailable,sov_available == False,-999,,,,,,,,,,,,,,,,,
DRIVEALONE - Unavailable for persons less than 16,age < 16,-999,,,,,,,,,,,,,,,,,
DRIVEALONE - Unavailable for joint tours,is_joint == True,-999,,,,,,,,,,,,,,,,,
DRIVEALONE - Unavailable if didn't drive to work,is_atwork_subtour & ~work_tour_is_SOV,-999,,,,,,,,,,,,,,,,,
DRIVEALONE - In-vehicle time,@c_ivt*odt_skims['SOV_TIME'],1,,,,,,,,,,,,,,,,,
DRIVEALONE - Terminal time,@c_walktimeshort * df.total_terminal_time,1,,,,,,,,,,,,,,,,,
DRIVEALONE - Operating cost ,@df.c_cost * costPerMile * odt_skims['SOV_DIST'],1,,,,,,,,,,,,,,,,,
DRIVEALONE - Parking cost ,c_cost * total_parking_cost,1,,,,,,,,,,,,,,,,,
DRIVEALONE - Person is between 16 and 19 years old,@c_age1619_da * ((df.age >= 16) & (df.age <= 19)),1,,,,,,,,,,,,,,,,,
#Shared ride 2,,,,,,,,,,,,,,,,,,,
SHARED2 - Unavailable,hov2_available == False,,-999,,,,,,,,,,,,,,,,
SHARED2 - Unavailable based on party size,is_joint & (number_of_participants > 2),,-999,,,,,,,,,,,,,,,,
SHARED2 - In-vehicle time,@c_ivt * odt_skims['HOV2_TIME'],,1,,,,,,,,,,,,,,,,
SHARED2 - Terminal time,@c_walktimeshort * df.total_terminal_time,,1,,,,,,,,,,,,,,,,
SHARED2 - Operating cost,@df.c_cost * costPerMile * odt_skims['HOV2_DIST'],,1,,,,,,,,,,,,,,,,
SHARED2 - Parking cost,@df.c_cost * df.total_parking_cost / costShareSr2,,1,,,,,,,,,,,,,,,,
SHARED2 - One person household,@c_hhsize1_sr * (df.hhsize == 1),,1,,,,,,,,,,,,,,,,
SHARED2 - Two person household,@c_hhsize2_sr * (df.hhsize == 2),,1,,,,,,,,,,,,,,,,
SHARED2 - Person is 16 years old or older,@c_age16p_sr * (df.age >= 16),,1,,,,,,,,,,,,,,,,
#Shared ride 3+,,,,,,,,,,,,,,,,,,,
SHARED3 - Unavailable,hov3_available == False,,,-999,,,,,,,,,,,,,,,
SHARED3 - Unavailable based joint tour mode,@df.is_joint & df.i_tour_mode.isin(I_SR2_MODES),,,-999,,,,,,,,,,,,,,,
SHARED3 - Unavailable if tour mode is shared 2,@df.i_tour_mode.isin(I_SR2_MODES),,,-999,,,,,,,,,,,,,,,
SHARED3 - In-vehicle time,@c_ivt * odt_skims['HOV3_TIME'],,,1,,,,,,,,,,,,,,,
SHARED3 - Terminal time,@c_walktimeshort * df.total_terminal_time,,,1,,,,,,,,,,,,,,,
SHARED3 - Operating cost,@df.c_cost * costPerMile * odt_skims['HOV3_DIST'],,,1,,,,,,,,,,,,,,,
SHARED3 - Parking cost,@df.c_cost *  df.total_parking_cost / costShareSr3,,,1,,,,,,,,,,,,,,,
SHARED3 - One person household,@c_hhsize1_sr * (df.hhsize == 1),,,1,,,,,,,,,,,,,,,
SHARED3 - Two person household,@c_hhsize2_sr * (df.hhsize == 2),,,1,,,,,,,,,,,,,,,
SHARED3 - Person is 16 years old or older,@c_age16p_sr * (df.age >= 16),,,1,,,,,,,,,,,,,,,
#Walk,,,,,,,,,,,,,,,,,,,
WALK - Time up to 2 miles,@c_walktimeshort * od_skims['DISTWALK'].clip(upper=walkThresh) * 60/walkSpeed,,,,1,,,,,,,,,,,,,,
WALK - Time beyond 2 of a miles,@c_walktimelong * (od_skims['DISTWALK'] - walkThresh).clip(lower=0) * 60/walkSpeed,,,,1,,,,,,,,,,,,,,
WALK - Destination zone densityIndex,@c_density_index * df.density_index,,,,1,,,,,,,,,,,,,,
WALK - Topology,@c_topology_walk * df.trip_topology,,,,1,,,,,,,,,,,,,,
#Bike,,,,,,,,,,,,,,,,,,,
BIKE - Unavailable if tour mode is not bike,~tour_mode_is_bike,,,,,-999,,,,,,,,,,,,,
BIKE - Unavailable if didn't bike to work,is_atwork_subtour & ~work_tour_is_bike,,,,,-999,,,,,,,,,,,,,
BIKE - Time up to 6 miles,@c_biketimeshort * od_skims['DISTBIKE'].clip(upper=bikeThresh)*60/bikeSpeed,,,,,1,,,,,,,,,,,,,
BIKE - Time beyond 6 of a miles,@c_biketimelong * (od_skims['DISTBIKE']-bikeThresh).clip(lower=0)*60/bikeSpeed,,,,,1,,,,,,,,,,,,,
BIKE - Destination zone densityIndex,@c_density_index*df.density_index,,,,,1,,,,,,,,,,,,,
BIKE - Topology,@c_topology_bike * df.trip_topology,,,,,1,,,,,,,,,,,,,
#Walk to Local,,,,,,,,,,,,,,,,,,,
WALK_LOC - Unavailable,walk_local_available == False,,,,,,-999,,,,,,,,,,,,
WALK_LOC - In-vehicle time,@c_ivt * odt_skims['WLK_LOC_IVT'],,,,,,1,,,,,,,,,,,,
WALK_LOC - Short iwait time,@c_short_i_wait * (odt_skims['WLK_LOC_IWAIT']).clip(upper=waitThresh),,,,,,1,,,,,,,,,,,,
WALK_LOC - Long iwait time,@c_long_i_wait * (odt_skims['WLK_LOC_IWAIT']-waitThresh).clip(0),,,,,,1,,,,,,,,,,,,
WALK_LOC - transfer wait time,@c_xwait * odt_skims['WLK_LOC_XWAIT'],,,,,,1,,,,,,,,,,,,
WALK_LOC - number of transfers,@c_xfers_wlk * (odt_skims['WLK_LOC_NT']).clip(0),,,,,,1,,,,,,,,,,,,
WALK_LOC - Walk access time,@c_wacc * df.origin_walk_time,,,,,,1,,,,,,,,,,,,
WALK_LOC - Walk egress time,@c_wegr * df.destination_walk_time,,,,,,1,,,,,,,,,,,,
WALK_LOC - Walk other time,@c_waux * odt_skims['WLK_LOC_WAUX'],,,,,,1,,,,,,,,,,,,
WALK_LOC - Fare,@df.c_cost * odt_skims['WLK_LOC_FARE'],,,,,,1,,,,,,,,,,,,
WALK_LOC - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,1,,,,,,,,,,,,
WALK_LOC - Topology,@c_topology_trn * df.trip_topology,,,,,,1,,,,,,,,,,,,
WALK_LOC - Person is less than 10 years old,@c_age010_trn * (df.age <= 10),,,,,,1,,,,,,,,,,,,
#Walk to Premium,,,,,,,,,,,,,,,,,,,
WALK_PRM - Unavailable,walk_premium_available == False,,,,,,,-999,,,,,,,,,,,
WALK_PRM - In-vehicle time,@c_ivt * odt_skims['WLK_PRM_IVT'],,,,,,,1,,,,,,,,,,,
WALK_PRM - In-vehicle time on PMov,@(c_ivt_pmov - c_ivt) * odt_skims['WLK_PRM_IVTT_PMov'],,,,,,,1,,,,,,,,,,,
WALK_PRM - In-vehicle time on StCar,@(c_ivt_stcar - c_ivt) * odt_skims['WLK_PRM_IVTT_StCar'],,,,,,,1,,,,,,,,,,,
WALK_PRM - In-vehicle time on BRT,@(c_ivt_brt - c_ivt) * odt_skims['WLK_PRM_IVTT_Brt'],,,,,,,1,,,,,,,,,,,
WALK_PRM - In-vehicle time on URB,@(c_ivt_urb - c_ivt) * odt_skims['WLK_PRM_IVTT_UrbRail'],,,,,,,1,,,,,,,,,,,
WALK_PRM - In-vehicle time on COM,@(c_ivt_com - c_ivt) * odt_skims['WLK_PRM_IVTT_ComRail'],,,,,,,1,,,,,,,,,,,
WALK_PRM - Short iwait time,@c_short_i_wait * (odt_skims['WLK_PRM_IWAIT']).clip(upper=waitThresh),,,,,,,1,,,,,,,,,,,
WALK_PRM - Long iwait time,@c_long_i_wait * (odt_skims['WLK_PRM_IWAIT']-waitThresh).clip(0),,,,,,,1,,,,,,,,,,,
WALK_PRM - transfer wait time,@c_xwait * odt_skims['WLK_PRM_XWAIT'],,,,,,,1,,,,,,,,,,,
WALK_PRM - number of transfers,@c_xfers_wlk * (odt_skims['WLK_PRM_NT']).clip(0),,,,,,,1,,,,,,,,,,,
WALK_PRM - Walk access time,@c_wacc * df.origin_walk_time,,,,,,,1,,,,,,,,,,,
WALK_PRM - Walk egress time,@c_wegr * df.destination_walk_time,,,,,,,1,,,,,,,,,,,
WALK_PRM - Walk otherLight rail/Ferry time,@c_waux * odt_skims['WLK_PRM_WAUX'],,,,,,,1,,,,,,,,,,,
WALK_PRM - Fare,@df.c_cost * odt_skims['WLK_PRM_FARE'],,,,,,,1,,,,,,,,,,,
WALK_PRM - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,1,,,,,,,,,,,
WALK_PRM - Topology,@c_topology_trn * df.trip_topology,,,,,,,1,,,,,,,,,,,
WALK_PRM - Person is less than 10 years old,@c_age010_trn * (df.age <= 10),,,,,,,1,,,,,,,,,,,
#Walk to Mix,,,,,,,,,,,,,,,,,,,
WALK_MIX - Unavailable,walk_mix_available == False,,,,,,,,-999,,,,,,,,,,
WALK_MIX - In-vehicle time,@c_ivt * odt_skims['WLK_MIX_IVT'],,,,,,,,1,,,,,,,,,,
WALK_MIX - In-vehicle time on Bus,@c_ivt * odt_skims['WLK_MIX_IVTT_Bus'],,,,,,,,1,,,,,,,,,,
WALK_MIX - In-vehicle time on PMov,@(c_ivt_pmov - c_ivt) * odt_skims['WLK_MIX_IVTT_PMov'],,,,,,,,1,,,,,,,,,,
WALK_MIX - In-vehicle time on StCar,@(c_ivt_stcar - c_ivt) * odt_skims['WLK_MIX_IVTT_StCar'],,,,,,,,1,,,,,,,,,,
WALK_MIX - In-vehicle time on BRT,@(c_ivt_brt - c_ivt) * odt_skims['WLK_MIX_IVTT_Brt'],,,,,,,,1,,,,,,,,,,
WALK_MIX - In-vehicle time on URB,@(c_ivt_urb - c_ivt) * odt_skims['WLK_MIX_IVTT_UrbRail'],,,,,,,,1,,,,,,,,,,
WALK_MIX - In-vehicle time on COM,@(c_ivt_com - c_ivt) * odt_skims['WLK_MIX_IVTT_ComRail'],,,,,,,,1,,,,,,,,,,
WALK_MIX - Short iwait time,@c_short_i_wait * (odt_skims['WLK_MIX_IWAIT']).clip(upper=waitThresh),,,,,,,,1,,,,,,,,,,
WALK_MIX - Long iwait time,@c_long_i_wait * (odt_skims['WLK_MIX_IWAIT']-waitThresh).clip(0),,,,,,,,1,,,,,,,,,,
WALK_MIX - transfer wait time,@c_xwait * odt_skims['WLK_MIX_XWAIT'],,,,,,,,1,,,,,,,,,,
WALK_MIX - number of transfers,@c_xfers_wlk * (odt_skims['WLK_MIX_NT']).clip(0),,,,,,,,1,,,,,,,,,,
WALK_MIX - Walk access time,@c_wacc * df.origin_walk_time,,,,,,,,1,,,,,,,,,,
WALK_MIX - Walk egress time,@c_wegr * df.destination_walk_time,,,,,,,,1,,,,,,,,,,
WALK_MIX - Walk other time,@c_waux * odt_skims['WLK_MIX_WAUX'],,,,,,,,1,,,,,,,,,,
WALK_MIX - Fare,@df.c_cost * odt_skims['WLK_MIX_FARE'],,,,,,,,1,,,,,,,,,,
WALK_MIX - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,1,,,,,,,,,,
WALK_MIX - Topology,@c_topology_trn * df.trip_topology,,,,,,,,1,,,,,,,,,,
WALK_MIX - Person is less than 10 years old,@c_age010_trn * (df.age <= 10),,,,,,,,1,,,,,,,,,,
#PNR to Local,,,,,,,,,,,,,,,,,,,
PNR_LOC - Unavailable for zero auto households,auto_ownership == 0,,,,,,,,,-999,,,,,,,,,
PNR_LOC - Unavailable for persons less than 16,age < 16,,,,,,,,,-999,,,,,,,,,
PNR_LOC - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,,1,,,,,,,,,
PNR_LOC - Topology,@c_topology_trn * df.trip_topology,,,,,,,,,1,,,,,,,,,
PNR_LOC - Person is less than 10 years old,@c_age010_trn * (df.age < 10),,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Unavailable,outbound & ~pnr_local_available_outbound,,,,,,,,,-999,,,,,,,,,
PNR_LOC outbound - In-vehicle time,@df.outbound * c_ivt * odt_skims['PNR_LOC_IVT'],,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Short iwait time,@df.outbound * c_short_i_wait * (odt_skims['PNR_LOC_IWAIT']).clip(upper=waitThresh),,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Long iwait time,@df.outbound * c_long_i_wait * (odt_skims['PNR_LOC_IWAIT']-waitThresh).clip(0),,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - transfer wait time,@df.outbound * c_xwait * odt_skims['PNR_LOC_XWAIT'],,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - number of transfers,@df.outbound * c_xfers_wlk * (odt_skims['PNR_LOC_NT']).clip(0),,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Drive time,@df.outbound * c_dtim * odt_skims['PNR_LOC_DTIME'],,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Walk egress time,@df.outbound * c_wegr * df.destination_walk_time,,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Walk other time,@df.outbound * c_waux * odt_skims['PNR_LOC_WAUX'],,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Fare and operating cost,@df.outbound * df.c_cost * (odt_skims['PNR_LOC_FARE'] + costPerMile*odt_skims['PNR_LOC_DDIST']),,,,,,,,,1,,,,,,,,,
PNR_LOC outbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['PNR_LOC_DDIST'])/ (od_skims['DIST']),,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Unavailable,inbound & ~pnr_local_available_inbound,,,,,,,,,-999,,,,,,,,,
PNR_LOC inbound - In-vehicle time,@df.inbound * c_ivt * odt_skims['PNRE_LOC_IVT'],,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Short iwait time,@df.inbound * c_short_i_wait * (odt_skims['PNRE_LOC_IWAIT']).clip(upper=waitThresh),,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Long iwait time,@df.inbound * c_long_i_wait * (odt_skims['PNRE_LOC_IWAIT']-waitThresh).clip(0),,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - transfer wait time,@df.inbound * c_xwait * odt_skims['PNRE_LOC_XWAIT'],,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - number of transfers,@df.inbound * c_xfers_wlk * (odt_skims['PNRE_LOC_NT']).clip(0),,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Drive time,@df.inbound * c_dtim * odt_skims['PNRE_LOC_DTIME'],,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Walk access time,@df.inbound * c_wacc * df.origin_walk_time,,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Walk other time,@df.inbound * c_waux * odt_skims['PNRE_LOC_WAUX'],,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Fare and operating cost,@df.inbound * df.c_cost * (odt_skims['PNRE_LOC_FARE'] + costPerMile*odt_skims['PNRE_LOC_DDIST']),,,,,,,,,1,,,,,,,,,
PNR_LOC inbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['PNRE_LOC_DDIST'])/ (od_skims['DIST']),,,,,,,,,1,,,,,,,,,
#Drive to Premium,,,,,,,,,,,,,,,,,,,
PNR_PRM - Unavailable for zero auto households,auto_ownership == 0,,,,,,,,,,-999,,,,,,,,
PNR_PRM - Unavailable for persons less than 16,age < 16,,,,,,,,,,-999,,,,,,,,
PNR_PRM  - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,,,1,,,,,,,,
PNR_PRM  - Topology,@c_topology_trn * df.trip_topology,,,,,,,,,,1,,,,,,,,
PNR_PRM  - Person is less than 10 years old,@c_age010_trn * (df.age < 10),,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Unavailable,outbound & ~pnr_premium_available_outbound,,,,,,,,,,-999,,,,,,,,
PNR_PRM outbound - In-vehicle time,@df.outbound * c_ivt * odt_skims['PNR_PRM_IVT'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on PMov,@df.outbound * (c_ivt_pmov - c_ivt) * odt_skims['PNR_PRM_IVTT_PMov'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on StCar,@df.outbound * (c_ivt_stcar - c_ivt) * odt_skims['PNR_PRM_IVTT_StCar'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on BRT,@df.outbound * (c_ivt_brt - c_ivt) * odt_skims['PNR_PRM_IVTT_Brt'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on URB,@df.outbound * (c_ivt_urb - c_ivt) * odt_skims['PNR_PRM_IVTT_UrbRail'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on COM,@df.outbound * (c_ivt_com - c_ivt) * odt_skims['PNR_PRM_IVTT_ComRail'],,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Short iwait time,@df.outbound * c_short_i_wait * (odt_skims['PNR_PRM_IWAIT']).clip(upper=waitThresh),,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Long iwait time,@df.outbound * c_long_i_wait * (odt_skims['PNR_PRM_IWAIT']-waitThresh).clip(0) ,,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - transfer wait time,@df.outbound * c_xwait * odt_skims['PNR_PRM_XWAIT'],,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - number of transfers,@df.outbound * c_xfers_drv * (odt_skims['PNR_PRM_NT']).clip(0),,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Drive time,@df.outbound * c_dtim * odt_skims['PNR_PRM_DTIME'],,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Walk egress time,@df.outbound * c_wegr * df.destination_walk_time,,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Walk other time,@df.outbound * c_waux * odt_skims['PNR_PRM_WAUX'],,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Fare and operating cost,@df.outbound * df.c_cost * (odt_skims['PNR_PRM_FARE'] + costPerMile * odt_skims['PNR_PRM_DDIST']),,,,,,,,,,1,,,,,,,,
PNR_PRM outbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['PNR_PRM_DDIST']) / od_skims['DIST'],,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Unavailable,inbound & ~pnr_premium_available_inbound,,,,,,,,,,-999,,,,,,,,
PNR_PRM inbound - In-vehicle time,@df.inbound * c_ivt * odt_skims['PNRE_PRM_IVT'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on PMov,@df.inbound * (c_ivt_pmov - c_ivt) * odt_skims['PNRE_PRM_IVTT_PMov'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on StCar,@df.inbound * (c_ivt_stcar - c_ivt) * odt_skims['PNRE_PRM_IVTT_StCar'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on BRT,@df.inbound * (c_ivt_brt - c_ivt) * odt_skims['PNRE_PRM_IVTT_Brt'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on URB,@df.inbound * (c_ivt_urb - c_ivt) * odt_skims['PNRE_PRM_IVTT_UrbRail'],,,,,,,,,,1,,,,,,,,
PNR_PRM - In-vehicle time on COM,@df.inbound * (c_ivt_com - c_ivt) * odt_skims['PNRE_PRM_IVTT_ComRail'],,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Short iwait time,@df.inbound * c_short_i_wait * (odt_skims['PNRE_PRM_IWAIT']).clip(upper=waitThresh),,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Long iwait time,@df.inbound * c_long_i_wait * (odt_skims['PNRE_PRM_IWAIT']-waitThresh).clip(0),,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - transfer wait time,@df.inbound * c_xwait * odt_skims['PNRE_PRM_XWAIT'],,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - number of transfers,@df.inbound * c_xfers_drv * (odt_skims['PNRE_PRM_NT']).clip(0),,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Drive time,@df.inbound * c_dtim * odt_skims['PNRE_PRM_DTIME'],,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Walk access time,@df.inbound * c_wacc * df.origin_walk_time,,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Walk other time,@df.inbound * c_waux * odt_skims['PNRE_PRM_WAUX'],,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Fare and operating cost,@df.inbound * df.c_cost * (odt_skims['PNRE_PRM_FARE'] + costPerMile * odt_skims['PNRE_PRM_DDIST']),,,,,,,,,,1,,,,,,,,
PNR_PRM inbound - Ratio of drive access distance to OD distance,@df.inbound * c_dacc_ratio * (odt_skims['PNRE_PRM_DDIST'])/ od_skims['DIST'],,,,,,,,,,1,,,,,,,,
#PNR to Mix,,,,,,,,,,,,,,,,,,,
PNR_MIX - Unavailable for zero auto households,auto_ownership == 0,,,,,,,,,,,-999,,,,,,,
PNR_MIX - Unavailable for persons less than 16,age < 16,,,,,,,,,,,-999,,,,,,,
PNR_MIX - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,,,,1,,,,,,,
PNR_MIX - Topology,@c_topology_trn * df.trip_topology,,,,,,,,,,,1,,,,,,,
PNR_MIX - Person is less than 10 years old,@c_age010_trn * (df.age < 10),,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Unavailable,outbound & ~pnr_mix_available_outbound,,,,,,,,,,,-999,,,,,,,
PNR_MIX outbound - In-vehicle time,@df.outbound * c_ivt * odt_skims['PNR_MIX_IVT'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on Bus,@df.outbound * c_ivt * odt_skims['PNR_MIX_IVTT_Bus'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on PMov,@df.outbound * (c_ivt_pmov - c_ivt) * odt_skims['PNR_MIX_IVTT_PMov'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on StCar,@df.outbound * (c_ivt_stcar - c_ivt) * odt_skims['PNR_MIX_IVTT_StCar'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on BRT,@df.outbound * (c_ivt_brt - c_ivt) * odt_skims['PNR_MIX_IVTT_Brt'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on URB,@df.outbound * (c_ivt_urb - c_ivt) * odt_skims['PNR_MIX_IVTT_UrbRail'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on COM,@df.outbound * (c_ivt_com - c_ivt) * odt_skims['PNR_MIX_IVTT_ComRail'],,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Short iwait time,@df.outbound * c_short_i_wait * (odt_skims['PNR_MIX_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Long iwait time,@df.outbound * c_long_i_wait * (odt_skims['PNR_MIX_IWAIT']-waitThresh).clip(0),,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - transfer wait time,@df.outbound * c_xwait * odt_skims['PNR_MIX_XWAIT'],,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - number of transfers,@df.outbound * c_xfers_drv * (odt_skims['PNR_MIX_NT']).clip(0),,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Drive time,@df.outbound * c_dtim * odt_skims['PNR_MIX_DTIME'],,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Walk egress ime,@df.outbound * c_wegr * df.destination_walk_time,,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Walk other time,@df.outbound * c_waux * odt_skims['PNR_MIX_WAUX'],,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Fare and operating cost,@df.outbound * df.c_cost * (odt_skims['PNR_MIX_FARE'] + costPerMile * odt_skims['PNR_MIX_DDIST']),,,,,,,,,,,1,,,,,,,
PNR_MIX outbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['PNR_MIX_DDIST']) / od_skims['DIST'],,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Unavailable,inbound & ~pnr_mix_available_inbound,,,,,,,,,,,-999,,,,,,,
PNR_MIX inbound - In-vehicle time,@df.inbound * c_ivt * odt_skims['PNRE_MIX_IVT'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on Bus,@df.inbound * c_ivt * odt_skims['PNRE_MIX_IVTT_Bus'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on PMov,@df.inbound * (c_ivt_pmov - c_ivt) * odt_skims['PNRE_MIX_IVTT_PMov'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on StCar,@df.inbound * (c_ivt_stcar - c_ivt) * odt_skims['PNRE_MIX_IVTT_StCar'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on BRT,@df.inbound * (c_ivt_brt - c_ivt) * odt_skims['PNRE_MIX_IVTT_Brt'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on URB,@df.inbound * (c_ivt_urb - c_ivt) * odt_skims['PNRE_MIX_IVTT_UrbRail'],,,,,,,,,,,1,,,,,,,
PNR_MIX - In-vehicle time on COM,@df.inbound * (c_ivt_com - c_ivt) * odt_skims['PNRE_MIX_IVTT_ComRail'],,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Short iwait time,@df.inbound * c_short_i_wait * (odt_skims['PNRE_MIX_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Long iwait time,@df.inbound * c_long_i_wait * (odt_skims['PNRE_MIX_IWAIT']-waitThresh).clip(0),,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - transfer wait time,@df.inbound * c_xwait * odt_skims['PNRE_MIX_XWAIT'],,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - number of transfers,@df.inbound * c_xfers_drv * (odt_skims['PNRE_MIX_NT']).clip(0),,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Drive time,@df.inbound * c_dtim * odt_skims['PNRE_MIX_DTIME'],,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Walk access time,@df.inbound * c_wacc * df.origin_walk_time,,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Walk other time,@df.inbound * c_waux * odt_skims['PNRE_MIX_WAUX'],,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Fare and operating cost,@df.inbound * df.c_cost * (odt_skims['PNRE_MIX_FARE'] + costPerMile * odt_skims['PNRE_MIX_DDIST']),,,,,,,,,,,1,,,,,,,
PNR_MIX inbound - Ratio of drive access distance to OD distance,@df.inbound * c_dacc_ratio * (odt_skims['PNRE_MIX_DDIST']) / od_skims['DIST'],,,,,,,,,,,1,,,,,,,
#KNR to Local,,,,,,,,,,,,,,,,,,,
KNR_LOC - Unavailable for persons less than 16,age < 16,,,,,,,,,,,,-999,,,,,,
KNR_LOC - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,,,,,1,,,,,,
KNR_LOC - Topology,@c_topology_trn * df.trip_topology,,,,,,,,,,,,1,,,,,,
KNR_LOC - Person is less than 10 years old,@c_age010_trn * (df.age < 10),,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Unavailable,outbound & ~knr_local_available_outbound,,,,,,,,,,,,-999,,,,,,
KNR_LOC outbound - In-vehicle time,@df.outbound * c_ivt * odt_skims['KNR_LOC_IVT'],,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Short iwait time,@df.outbound * c_short_i_wait * (odt_skims['KNR_LOC_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Long iwait time,@df.outbound * c_long_i_wait * (odt_skims['KNR_LOC_IWAIT']-waitThresh).clip(0),,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - transfer wait time,@df.outbound * c_xwait * odt_skims['KNR_LOC_XWAIT'],,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - number of transfers,@df.outbound * c_xfers_wlk * (odt_skims['KNR_LOC_NT']).clip(0),,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Drive time,@df.outbound * c_dtim * odt_skims['KNR_LOC_DTIME'],,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Walk egress time,@df.outbound * c_wegr * df.destination_walk_time,,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Walk other time,@df.outbound * c_waux * odt_skims['KNR_LOC_WAUX'],,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Fare and operating cost,@df.outbound * df.c_cost * (odt_skims['KNR_LOC_FARE'] + costPerMile*odt_skims['KNR_LOC_DDIST']),,,,,,,,,,,,1,,,,,,
KNR_LOC outbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['KNR_LOC_DDIST'])/ (od_skims['DIST']),,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Unavailable,inbound & ~knr_local_available_inbound,,,,,,,,,,,,-999,,,,,,
KNR_LOC inbound - In-vehicle time,@df.inbound * c_ivt * odt_skims['KNRE_LOC_IVT'],,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Short iwait time,@df.inbound * c_short_i_wait * (odt_skims['KNRE_LOC_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Long iwait time,@df.inbound * c_long_i_wait * (odt_skims['KNRE_LOC_IWAIT']-waitThresh).clip(0),,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - transfer wait time,@df.inbound * c_xwait * odt_skims['KNRE_LOC_XWAIT'],,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - number of transfers,@df.inbound * c_xfers_wlk * (odt_skims['KNRE_LOC_NT']).clip(0),,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Drive time,@df.inbound * c_dtim * odt_skims['KNRE_LOC_DTIME'],,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Walk access time,@df.inbound * c_wacc * df.origin_walk_time,,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Walk other time,@df.inbound * c_waux * odt_skims['KNRE_LOC_WAUX'],,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Fare and operating cost,@df.inbound * df.c_cost * (odt_skims['KNRE_LOC_FARE'] + costPerMile*odt_skims['KNRE_LOC_DDIST']),,,,,,,,,,,,1,,,,,,
KNR_LOC inbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['KNRE_LOC_DDIST'])/ (od_skims['DIST']),,,,,,,,,,,,1,,,,,,
#Drive to Premium,,,,,,,,,,,,,,,,,,,
KNR_PRM - Unavailable for persons less than 16,age < 16,,,,,,,,,,,,,-999,,,,,
KNR_PRM  - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,,,,,,1,,,,,
KNR_PRM  - Topology,@c_topology_trn * df.trip_topology,,,,,,,,,,,,,1,,,,,
KNR_PRM  - Person is less than 10 years old,@c_age010_trn * (df.age < 10),,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Unavailable,outbound & ~knr_premium_available_outbound,,,,,,,,,,,,,-999,,,,,
KNR_PRM outbound - In-vehicle time,@df.outbound * c_ivt * odt_skims['KNR_PRM_IVT'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on PMov,@df.outbound * (c_ivt_pmov - c_ivt) * odt_skims['KNR_PRM_IVTT_PMov'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on StCar,@df.outbound * (c_ivt_stcar - c_ivt) * odt_skims['KNR_PRM_IVTT_StCar'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on BRT,@df.outbound * (c_ivt_brt - c_ivt) * odt_skims['KNR_PRM_IVTT_Brt'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on URB,@df.outbound * (c_ivt_urb - c_ivt) * odt_skims['KNR_PRM_IVTT_UrbRail'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on COM,@df.outbound * (c_ivt_com - c_ivt) * odt_skims['KNR_PRM_IVTT_ComRail'],,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Short iwait time,@df.outbound * c_short_i_wait * (odt_skims['KNR_PRM_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Long iwait time,@df.outbound * c_long_i_wait * (odt_skims['KNR_PRM_IWAIT']-waitThresh).clip(0) ,,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - transfer wait time,@df.outbound * c_xwait * odt_skims['KNR_PRM_XWAIT'],,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - number of transfers,@df.outbound * c_xfers_drv * (odt_skims['KNR_PRM_NT']).clip(0),,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Drive time,@df.outbound * c_dtim * odt_skims['KNR_PRM_DTIME'],,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Walk egress time,@df.outbound * c_wegr * df.destination_walk_time,,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Walk other time,@df.outbound * c_waux * odt_skims['KNR_PRM_WAUX'],,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Fare and operating cost,@df.outbound * df.c_cost * (odt_skims['KNR_PRM_FARE'] + costPerMile * odt_skims['KNR_PRM_DDIST']),,,,,,,,,,,,,1,,,,,
KNR_PRM outbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['KNR_PRM_DDIST']) / od_skims['DIST'],,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Unavailable,inbound & ~knr_premium_available_inbound,,,,,,,,,,,,,-999,,,,,
KNR_PRM inbound - In-vehicle time,@df.inbound * c_ivt * odt_skims['KNRE_PRM_IVT'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on PMov,@df.inbound * (c_ivt_pmov - c_ivt) * odt_skims['KNRE_PRM_IVTT_PMov'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on StCar,@df.inbound * (c_ivt_stcar - c_ivt) * odt_skims['KNRE_PRM_IVTT_StCar'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on BRT,@df.inbound * (c_ivt_brt - c_ivt) * odt_skims['KNRE_PRM_IVTT_Brt'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on URB,@df.inbound * (c_ivt_urb - c_ivt) * odt_skims['KNRE_PRM_IVTT_UrbRail'],,,,,,,,,,,,,1,,,,,
KNR_PRM - In-vehicle time on COM,@df.inbound * (c_ivt_com - c_ivt) * odt_skims['KNRE_PRM_IVTT_ComRail'],,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Short iwait time,@df.inbound * c_short_i_wait * (odt_skims['KNRE_PRM_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Long iwait time,@df.inbound * c_long_i_wait * (odt_skims['KNRE_PRM_IWAIT']-waitThresh).clip(0),,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - transfer wait time,@df.inbound * c_xwait * odt_skims['KNRE_PRM_XWAIT'],,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - number of transfers,@df.inbound * c_xfers_drv * (odt_skims['KNRE_PRM_NT']).clip(0),,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Drive time,@df.inbound * c_dtim * odt_skims['KNRE_PRM_DTIME'],,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Walk access time,@df.inbound * c_wacc * df.origin_walk_time,,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Walk other time,@df.inbound * c_waux * odt_skims['KNRE_PRM_WAUX'],,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Fare and operating cost,@df.inbound * df.c_cost * (odt_skims['KNRE_PRM_FARE'] + costPerMile * odt_skims['KNRE_PRM_DDIST']),,,,,,,,,,,,,1,,,,,
KNR_PRM inbound - Ratio of drive access distance to OD distance,@df.inbound * c_dacc_ratio * (odt_skims['KNRE_PRM_DDIST'])/ od_skims['DIST'],,,,,,,,,,,,,1,,,,,
#KNR to Mix,,,,,,,,,,,,,,,,,,,
KNR_MIX - Unavailable for persons less than 16,age < 16,,,,,,,,,,,,,,-999,,,,
KNR_MIX - Destination zone densityIndex,@c_density_index * df.density_index,,,,,,,,,,,,,,1,,,,
KNR_MIX - Topology,@c_topology_trn * df.trip_topology,,,,,,,,,,,,,,1,,,,
KNR_MIX - Person is less than 10 years old,@c_age010_trn * (df.age < 10),,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Unavailable,outbound & ~knr_mix_available_outbound,,,,,,,,,,,,,,-999,,,,
KNR_MIX outbound - In-vehicle time,@df.outbound * c_ivt * odt_skims['KNR_MIX_IVT'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on Bus,@df.outbound * c_ivt * odt_skims['KNR_MIX_IVTT_Bus'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on PMov,@df.outbound * (c_ivt_pmov - c_ivt) * odt_skims['KNR_MIX_IVTT_PMov'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on StCar,@df.outbound * (c_ivt_stcar - c_ivt) * odt_skims['KNR_MIX_IVTT_StCar'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on BRT,@df.outbound * (c_ivt_brt - c_ivt) * odt_skims['KNR_MIX_IVTT_Brt'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on URB,@df.outbound * (c_ivt_urb - c_ivt) * odt_skims['KNR_MIX_IVTT_UrbRail'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on COM,@df.outbound * (c_ivt_com - c_ivt) * odt_skims['KNR_MIX_IVTT_ComRail'],,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Short iwait time,@df.outbound * c_short_i_wait * (odt_skims['KNR_MIX_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Long iwait time,@df.outbound * c_long_i_wait * (odt_skims['KNR_MIX_IWAIT']-waitThresh).clip(0),,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - transfer wait time,@df.outbound * c_xwait * odt_skims['KNR_MIX_XWAIT'],,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - number of transfers,@df.outbound * c_xfers_drv * (odt_skims['KNR_MIX_NT']).clip(0),,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Drive time,@df.outbound * c_dtim * odt_skims['KNR_MIX_DTIME'],,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Walk egress ime,@df.outbound * c_wegr * df.destination_walk_time,,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Walk other time,@df.outbound * c_waux * odt_skims['KNR_MIX_WAUX'],,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Fare and operating cost,@df.outbound * df.c_cost * (odt_skims['KNR_MIX_FARE'] + costPerMile * odt_skims['KNR_MIX_DDIST']),,,,,,,,,,,,,,1,,,,
KNR_MIX outbound - Ratio of drive access distance to OD distance,@df.outbound * c_dacc_ratio * (odt_skims['KNR_MIX_DDIST']) / od_skims['DIST'],,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Unavailable,inbound & ~knr_mix_available_inbound,,,,,,,,,,,,,,-999,,,,
KNR_MIX inbound - In-vehicle time,@df.inbound * c_ivt * odt_skims['KNRE_MIX_IVT'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on Bus,@df.inbound * c_ivt * odt_skims['KNRE_MIX_IVTT_Bus'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on PMov,@df.inbound * (c_ivt_pmov - c_ivt) * odt_skims['KNRE_MIX_IVTT_PMov'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on StCar,@df.inbound * (c_ivt_stcar - c_ivt) * odt_skims['KNRE_MIX_IVTT_StCar'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on BRT,@df.inbound * (c_ivt_brt - c_ivt) * odt_skims['KNRE_MIX_IVTT_Brt'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on URB,@df.inbound * (c_ivt_urb - c_ivt) * odt_skims['KNRE_MIX_IVTT_UrbRail'],,,,,,,,,,,,,,1,,,,
KNR_MIX - In-vehicle time on COM,@df.inbound * (c_ivt_com - c_ivt) * odt_skims['KNRE_MIX_IVTT_ComRail'],,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Short iwait time,@df.inbound * c_short_i_wait * (odt_skims['KNRE_MIX_IWAIT']).clip(upper=waitThresh),,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Long iwait time,@df.inbound * c_long_i_wait * (odt_skims['KNRE_MIX_IWAIT']-waitThresh).clip(0),,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - transfer wait time,@df.inbound * c_xwait * odt_skims['KNRE_MIX_XWAIT'],,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - number of transfers,@df.inbound * c_xfers_drv * (odt_skims['KNRE_MIX_NT']).clip(0),,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Drive time,@df.inbound * c_dtim * odt_skims['KNRE_MIX_DTIME'],,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Walk access time,@df.inbound * c_wacc * df.origin_walk_time,,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Walk other time,@df.inbound * c_waux * odt_skims['KNRE_MIX_WAUX'],,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Fare and operating cost,@df.inbound * df.c_cost * (odt_skims['KNRE_MIX_FARE'] + costPerMile * odt_skims['KNRE_MIX_DDIST']),,,,,,,,,,,,,,1,,,,
KNR_MIX inbound - Ratio of drive access distance to OD distance,@df.inbound * c_dacc_ratio * (odt_skims['KNRE_MIX_DDIST']) / od_skims['DIST'],,,,,,,,,,,,,,1,,,,
#Taxi,,,,,,,,,,,,,,,,,,,
Taxi - In-vehicle time,@c_ivt * odt_skims['HOV2_TIME'],,,,,,,,,,,,,,,,1,,
Taxi - Wait time,@c_ivt * 1.5 * df.origTaxiWaitTime,,,,,,,,,,,,,,,,1,,
#Taxi - Tolls,@df.c_cost * odt_skims['HOV2_VTOLL'],,,,,,,,,,,,,,,,1,,
#Taxi - Bridge toll,@df.c_cost * odt_skims['HOV2_BTOLL'],,,,,,,,,,,,,,,,1,,
Taxi - Fare,@df.c_cost * (Taxi_baseFare + odt_skims['HOV2_DIST'] * Taxi_costPerMile + odt_skims['HOV2_TIME'] * Taxi_costPerMinute)*100,,,,,,,,,,,,,,,,1,,
#TNC Single,,,,,,,,,,,,,,,,,,,
TNC Single - In-vehicle time,@c_ivt * odt_skims['HOV2_TIME'] ,,,,,,,,,,,,,,,,,1,
TNC Single - Wait time,@c_ivt * 1.5 * df.origSingleTNCWaitTime,,,,,,,,,,,,,,,,,1,
#TNC Single - Tolls,@df.c_cost * odt_skims['HOV2_VTOLL'],,,,,,,,,,,,,,,,,1,
#TNC Single - Bridge toll,@df.c_cost * (odt_skims['HOV2_BTOLL'] + dot_skims['HOV2_BTOLL']),,,,,,,,,,,,,,,,,1,
TNC Single - Cost,"@df.c_cost * np.maximum(TNC_single_baseFare + odt_skims['HOV2_DIST'] * TNC_single_costPerMile + odt_skims['HOV2_TIME'] * TNC_single_costPerMinute, TNC_single_costMinimum) * 100",,,,,,,,,,,,,,,,,1,
#TNC Shared,,,,,,,,,,,,,,,,,,,
TNC Shared - In-vehicle time,@c_ivt * odt_skims['HOV2_TIME'] * TNC_shared_IVTFactor,,,,,,,,,,,,,,,,,,1
TNC Shared - Wait time,@c_ivt  * 1.5 * df.origSharedTNCWaitTime,,,,,,,,,,,,,,,,,,1
#TNC Shared - Tolls,@df.c_cost * odt_skims['HOV2_VTOLL'],,,,,,,,,,,,,,,,,,1
#TNC Shared - Bridge toll,@df.c_cost * (odt_skims['HOV2_BTOLL'] + dot_skims['HOV2_BTOLL']),,,,,,,,,,,,,,,,,,1
TNC Shared - Cost,"@df.c_cost * np.maximum(TNC_shared_baseFare + odt_skims['HOV2_DIST'] * TNC_shared_costPerMile + odt_skims['HOV2_TIME']* TNC_shared_costPerMinute, TNC_shared_costMinimum) * 100",,,,,,,,,,,,,,,,,,1
#,,,,,,,,,,,,,,,,,,,
Auto tour mode availability,tour_mode_is_auto,,,,,-999,-999,-999,-999,-999,-999,-999,-999,-999,-999,-999,,,
Walk tour mode availability,tour_mode_is_walk,-999,-999,-999,,-999,-999,-999,-999,-999,-999,-999,-999,-999,-999,-999,,,
Bike tour mode availability,tour_mode_is_bike,-999,-999,-999,,,-999,-999,-999,-999,-999,-999,-999,-999,-999,-999,,,
Walk to Transit tour mode availability,tour_mode_is_walk_transit,-999,,,,-999,,,,-999,-999,-999,-999,-999,-999,-999,,,
Drive to Transit tour mode availability,tour_mode_is_drive_transit,-999,-999,-999,-999,-999,-999,-999,-999,,,,,,,-999,,,
School bus tour mode availability,tour_mode_is_school_bus,-999,,,,-999,-999,-999,-999,-999,-999,-999,-999,-999,-999,,,,
#indiv tour ASCs,,,,,,,,,,,,,,,,,,,
Drive Alone tour mode ASC -- shared ride 2,@sov_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),,1,,,,,,,,,,,,,,,,
Drive Alone tour mode ASC -- shared ride 3+,@sov_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),,,1,,,,,,,,,,,,,,,
Drive Alone tour mode ASC -- walk,@sov_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),,,,1,,,,,,,,,,,,,,
Drive Alone tour mode ASC -- ride hail,@sov_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SOV_MODES)),,,,,,,,,,,,,,,,1,1,1
#Shared Ride 2 tour mode ASC -- shared ride 2 - reference mode,@sr2_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),,1,,,,,,,,,,,,,,,,
Shared Ride 2 tour mode ASC -- drive alone,@sr2_ASC_sov * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),1,,,,,,,,,,,,,,,,,
Shared Ride 2 tour mode ASC -- walk,@sr2_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),,,,1,,,,,,,,,,,,,,
Shared Ride 2 tour mode ASC -- ride hail,@sr2_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR2_MODES)),,,,,,,,,,,,,,,,1,1,1
Shared Ride 3+ tour mode ASC -- drive alone,@sr3p_ASC_sov * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),1,,,,,,,,,,,,,,,,,
Shared Ride 3+ tour mode ASC -- shared ride 2,@sr3p_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),,1,,,,,,,,,,,,,,,,
#Shared Ride 3+ tour mode ASC -- shared ride 3+ - reference mode,@sr3p_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),,,1,,,,,,,,,,,,,,,
Shared Ride 3+ tour mode ASC -- walk,@sr3p_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),,,,1,,,,,,,,,,,,,,
Shared Ride 3+ tour mode ASC -- ride hail,@sr3p_ASC_rh * (df.is_indiv & df.i_tour_mode.isin(I_SR3P_MODES)),,,,,,,,,,,,,,,,1,1,1
Walk tour mode ASC -- ride hail,@walk_ASC_rh * df.is_indiv * (df.i_tour_mode == I_WALK_MODE),,,,,,,,,,,,,,,,1,1,1
Bike tour mode ASC -- walk,@bike_ASC_walk * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),,,,1,,,,,,,,,,,,,,
Bike tour mode ASC -- ride hail,@bike_ASC_rh * df.is_indiv * (df.i_tour_mode == I_BIKE_MODE),,,,,,,,,,,,,,,,1,1,1
Walk-transit tour mode ASC -- shared ride 2,@walktransit_ASC_sr2 * (df.is_indiv & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,1,,,,,,,,,,,,,,,,
Walk-transit tour mode ASC -- shared ride 3+,@walktransit_ASC_sr3p * (df.is_indiv & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,1,,,,,,,,,,,,,,,
Walk-transit tour mode ASC -- walk,@walktransit_ASC_walk * (df.is_indiv & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,,1,,,,,,,,,,,,,,
Walk-transit tour mode ASC -- ride hail,@walk_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_walk_transit),,,,,,,,,,,,,,,,1,1,1
Drive to Transit tour mode ASC -- ride hail,@drive_transit_ASC_rh * (df.is_indiv & df.tour_mode_is_drive_transit),,,,,,,,,,,,,,,,1,1,1
Ride Hail tour mode ASC -- ride hail,@ride_hail_ASC_taxi * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,1,,
Ride Hail tour mode ASC -- ride hail,@ride_hail_ASC_tnc_single * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,,1,
Ride Hail tour mode ASC -- ride hail,@ride_hail_ASC_tnc_shared * (df.is_indiv & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,,,1
#Walk-transit tour mode ASC -- walk-transit - reference mode,@walktransit_ASC_walktransit * (df.is_indiv & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,,,,1,1,1,,,,,,,,,,
#PNR tour mode ASC -- PNR - reference mode,@pnr_ASC_pnr * (df.is_indiv & df.i_tour_mode.isin(I_PNR_TRANSIT_MODES)),,,,,,,,,1,1,1,,,,,,,
#KNR tour mode ASC -- KNR - reference mode,@knr_ASC_knr * (df.is_indiv & df.i_tour_mode.isin(I_KNR_TRANSIT_MODES)),,,,,,,,,,,,1,1,1,,,,
#joint tour ASCs,,,,,,,,,,,,,,,,,,,
#joint - SR2 tour mode ASC -- shared ride 2 - reference mode,@joint_sr2_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_SR2_MODES)),,1,,,,,,,,,,,,,,,,
joint - SR2 tour mode ASC -- walk,@joint_sr2_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_SR2_MODES)),,,,1,,,,,,,,,,,,,,
#joint - SR3 tour mode ASC -- shared ride 3+ - reference mode,@joint_sr3p_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_SR3P_MODES)),,,1,,,,,,,,,,,,,,,
joint - SR3 tour mode ASC -- shared ride 2,@joint_sr3p_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_SR3P_MODES)),,1,,,,,,,,,,,,,,,,
joint - SR3 tour mode ASC -- walk,@joint_sr3p_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_SR3P_MODES)),,,,1,,,,,,,,,,,,,,
joint - auto tour mode ASC -- ride hail,@joint_auto_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,1,1,1
joint - Bike tour mode ASC -- walk,@joint_bike_ASC_walk * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),,,,1,,,,,,,,,,,,,,
joint - Bike tour mode ASC -- ride hail,@joint_bike_ASC_rh * df.is_joint * (df.i_tour_mode == I_BIKE_MODE),,,,,,,,,,,,,,,,1,1,1
joint - Walk-transit tour mode ASC -- shared ride 2,@joint_walktransit_ASC_sr2 * (df.is_joint & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,1,,,,,,,,,,,,,,,,
joint - Walk-transit tour mode ASC -- shared ride 3+,@joint_walktransit_ASC_sr3p * (df.is_joint & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,1,,,,,,,,,,,,,,,
joint - Walk-transit tour mode ASC -- walk,@joint_walktransit_ASC_walk * (df.is_joint & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,,1,,,,,,,,,,,,,,
joint - Walk to Transit tour mode ASC -- ride hail,@joint_walk_transit_ASC_rh * (df.is_joint & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,,,,,,,,,,,,,,1,1,1
joint - Drive to Transit tour mode ASC -- ride hail,@joint_drive_transit_ASC_rh * (df.is_joint & df.tour_mode_is_drive_transit),,,,,,,,,,,,,,,,1,1,1
joint - Ride Hail tour mode ASC -- ride hail,@joint_ride_hail_ASC_taxi * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,1,,
joint - Ride Hail tour mode ASC -- ride hail,@joint_ride_hail_ASC_tnc_single * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,,1,
joint - Ride Hail tour mode ASC -- ride hail,@joint_ride_hail_ASC_tnc_shared * (df.is_joint & df.i_tour_mode.isin(I_RIDE_HAIL_MODES)),,,,,,,,,,,,,,,,,,1
#joint - Walk-transit tour mode ASC -- walk-transit - reference mode,@joint_walktransit_ASC_walktransit * (df.is_joint & df.i_tour_mode.isin(I_WALK_TRANSIT_MODES)),,,,,,1,1,1,,,,,,,,,,
#joint - PNR tour mode ASC -- PNR - reference mode,@joint_pnr_ASC_pnr * (df.is_joint & df.i_tour_mode.isin(I_PNR_TRANSIT_MODES)),,,,,,,,,1,1,1,,,,,,,
#joint - KNR tour mode ASC -- KNR - reference mode,@joint_knr_ASC_knr * (df.is_joint & df.i_tour_mode.isin(I_KNR_TRANSIT_MODES)),,,,,,,,,,,,1,1,1,,,,
#,,,,,,,,,,,,,,,,,,,
Walk not available for long distances,@df.tour_mode_is_walk & (od_skims['DISTWALK'] > 3),,,,-999,,,,,,,,,,,,,,
Bike not available for long distances,@df.tour_mode_is_walk & (od_skims['DISTBIKE'] > 8),,,,,-999,,,,,,,,,,,,,
Origin density index,@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,,,,1,1,1,1,1,,,,,,,,,,
#Walk-express penalty for intermediate stops,@c_walk_express_penalty * ~(df.first_trip | df.first_trip),,,,,,,,1,,,,,,,,,,
#School Bus,,,,,,,,,,,,,,,,,,,
School Bus Unavailable if primary purpose NOT school,~is_school,,,,,,,,,,,,,,,-999,,,
School Bus Unavailable - Tour Mode = SOV,tour_mode_is_SOV,,,,,,,,,,,,,,,-999,,,
School Bus Unavailable - Tour Mode = Transit,tour_mode_is_drive_transit,,,,,,,,,,,,,,,-999,,,
School Bus - In-vehicle time (20 miles per hour),@c_ivt * odt_skims['HOV3_DIST']*3,,,,,,,,,,,,,,,1,,,
School Bus - Walk Time,@c_wacc*10,,,,,,,,,,,,,,,1,,,
School Bus - Wait Time,@c_short_i_wait*10,,,,,,,,,,,,,,,1,,,
School Bus tour mode ASC -- shared ride 2,@schoolbus_ASC_sr2 * df.i_tour_mode.isin(I_SCHOOLBUS_MODE),,1,,,,,,,,,,,,,,,,
School Bus tour mode ASC -- shared ride 3+,@schoolbus_ASC_sr3p * df.i_tour_mode.isin(I_SCHOOLBUS_MODE),,,1,,,,,,,,,,,,,,,
School Bus tour mode ASC -- walk,@schoolbus_ASC_walk * df.i_tour_mode.isin(I_SCHOOLBUS_MODE),,,,1,,,,,,,,,,,,,,
local_ASC,@local_ASC,,,,,,1,,,1,,,1,,,,,,
premium_ASC,@premium_ASC,,,,,,,1,,,1,,,1,,,,,
mix_ASC,@mix_ASC,,,,,,,,1,,,1,,,1,,,,
Origin density index,@(c_origin_density_index*df.origin_density_index).clip(c_origin_density_index_max) if origin_density_applied else 0,,,,,,,1,1,1,1,1,1,1,,,,1,1
TNC shared adjustment,@adjust_tnc_shared,,,,,,,,,,,,,,,,,,1
