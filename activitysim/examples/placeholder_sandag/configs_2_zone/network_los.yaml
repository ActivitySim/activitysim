#inherit_settings: True

# read cached skims (using numpy memmap) from output directory (memmap is faster than omx )
read_skim_cache: False
# write memmapped cached skims to output directory after reading from omx, for use in subsequent runs
write_skim_cache: False

zone_system: 2

# glob 'skims*.omx' will match one or more files: skims.omx, skims1.omx, skims2.omx...
taz_skims:
    omx: skims*.omx
    zarr: skims.zarr
    zarr-digital-encoding:
        - {regex: .*_BOARDS   , joint_dict: true}
        - {regex: .*_DDIST    , joint_dict: true}
        - {regex: .*_DTIM     , joint_dict: true}
        - {regex: .*_FAR      , joint_dict: true}
        - {regex: .*_IWAIT    , joint_dict: true}
        - {regex: .*_KEYIVT   , joint_dict: true}
        - {regex: .*_TOTIVT   , joint_dict: true}
        - {regex: .*_FERRYIVT , joint_dict: true}
        - {regex: .*_WAIT     , joint_dict: true}
        - {regex: .*_WAUX     , joint_dict: true}
        - {regex: .*_XWAIT    , joint_dict: true}
        - {regex: .*_BTOLL    , joint_dict: true}
        - {regex: .*_TIME     , joint_dict: true}
        - {regex: .*_VTOLL    , joint_dict: true}
        - {regex: "^(?!_s_).*_DIST" , joint_dict: true}


maz: maz.csv

maz_to_maz:
  tables:
    - maz_to_maz_walk.csv
    - maz_to_maz_bike.csv

  # maz_to_maz blending distance (missing or 0 means no blending)
  max_blend_distance:
    # blend distance of 0 means no blending
    DISTBIKE: 0
    DISTWALK: 0

  # missing means use the skim value itself rather than DIST skim (e.g. DISTBIKE)
  #blend_distance_skim_name: DIST

skim_time_periods:
    time_window: 1440
    period_minutes: 60
    periods: [0, 6, 11, 16, 20, 24]
    labels: ['EA', 'AM', 'MD', 'PM', 'EV']
