Description,Target,Expression
#,,
local,_DF_IS_TOUR,'tour_type' in df.columns
,number_of_participants,df.number_of_participants if _DF_IS_TOUR else 1
,is_joint,(df.tour_category=='joint') if _DF_IS_TOUR else False
#,,
,orig_district,"reindex(land_use.DISTRICT20, df[orig_col_name])"
,dest_district,"reindex(land_use.DISTRICT20, df[dest_col_name])"
,districts1_2_cte,"np.where((orig_district.isin([1,2])) & (dest_district.isin([1,2])), 0.1,0)"
,districts8_13_cte,"np.where((orig_district.isin([8,9,10,13])) & (dest_district.isin([8,9,10,13])), -2,0)"
,districts15_cte,"np.where((orig_district==15) & (dest_district==15), 2.2,0)"
#,,
 local,_HAVE_PARENT_TOURS,'parent_tour_id' in df.columns
,_parent_tour_mode,"reindex(tours.tour_mode, df.parent_tour_id) if _HAVE_PARENT_TOURS else ''"
,work_tour_is_drive,_parent_tour_mode.isin(['DRIVEALONE'])
,work_tour_is_bike,_parent_tour_mode=='BIKE'
,work_tour_is_SOV,_parent_tour_mode.isin(['DRIVEALONE'])
#,,
,is_mandatory,(df.tour_category=='mandatory') if 'tour_category' in df.columns else False
,is_joint,(df.tour_category=='joint') if 'tour_category' in df.columns else False
,is_indiv,~is_joint
,is_atwork_subtour,(df.tour_category=='atwork') if 'tour_category' in df.columns else False
,is_escort,(df.tour_type == 'escort') if _DF_IS_TOUR else False
,is_school,(df.tour_type=='school') & (df.is_university==False)  if _DF_IS_TOUR else False
#,,
#,c_cost,(0.60 * c_ivt) / df.value_of_time
#,,
,ivot,1.0/df.value_of_time
,terminal_time,"reindex(land_use.TERMINAL, df[dest_col_name])"
,dest_density_index,"reindex(land_use.density_index, df[dest_col_name])"
# FIXME no transit subzones so all zones short walk to transit,,
,_walk_transit_origin,True
,_walk_transit_destination,True
,walk_transit_available,_walk_transit_origin & _walk_transit_destination
,pnr_transit_available,_walk_transit_destination & (df.auto_ownership > 0)
,knr_transit_available,_walk_transit_origin & _walk_transit_destination
,origin_walk_time,shortWalk*60/walkSpeed
,destination_walk_time,shortWalk*60/walkSpeed
# RIDEHAIL,,
,origin_density_measure,"(reindex(land_use.tot_pop, df[orig_col_name]) + reindex(land_use.tot_emp, df[orig_col_name])) / (reindex(land_use.tot_acres, df[orig_col_name]) / 640)"
,dest_density_measure,"(reindex(land_use.tot_pop, df[dest_col_name]) + reindex(land_use.tot_emp, df[dest_col_name])) / (reindex(land_use.tot_acres, df[dest_col_name]) / 640)"
,origin_density,"pd.cut(origin_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)"
,dest_density,"pd.cut(dest_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)"
,origin_zone_taxi_wait_time_mean,"origin_density.map({k: v for k, v in Taxi_waitTime_mean.items()})"
,origin_zone_taxi_wait_time_sd,"origin_density.map({k: v for k, v in Taxi_waitTime_sd.items()})"
,dest_zone_taxi_wait_time_mean,"dest_density.map({k: v for k, v in Taxi_waitTime_mean.items()})"
,dest_zone_taxi_wait_time_sd,"dest_density.map({k: v for k, v in Taxi_waitTime_sd.items()})"
# ,, Note that the mean and standard deviation are not the values for the distribution itself  but of the underlying normal distribution it is derived from
,origTaxiWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_taxi_wait_time_mean, sigma=origin_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,destTaxiWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_taxi_wait_time_mean, sigma=dest_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_singleTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})"
,origin_zone_singleTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})"
,dest_zone_singleTNC_wait_time_mean,"dest_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})"
,dest_zone_singleTNC_wait_time_sd,"dest_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})"
,origSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_singleTNC_wait_time_mean, sigma=origin_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,destSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_singleTNC_wait_time_mean, sigma=dest_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,origin_zone_sharedTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})"
,origin_zone_sharedTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})"
,dest_zone_sharedTNC_wait_time_mean,"dest_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})"
,dest_zone_sharedTNC_wait_time_sd,"dest_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})"
,origSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_sharedTNC_wait_time_mean, sigma=origin_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,destSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_sharedTNC_wait_time_mean, sigma=dest_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)"
,totalWaitTaxi,origTaxiWaitTime + destTaxiWaitTime
,totalWaitSingleTNC,origSingleTNCWaitTime + destSingleTNCWaitTime
,totalWaitSharedTNC,origSharedTNCWaitTime + destSharedTNCWaitTime
#,,
,_free_parking_available,(df.tour_type == 'work') & df.free_parking_at_work if _DF_IS_TOUR else False
,_dest_daily_parking_cost,"reindex(land_use.parking_daily, df[dest_col_name])"
,_dest_hourly_parking_cost_temp,"reindex(land_use.parking_hourly, df[dest_col_name])"
"if hourlycost option not exist, set it to high so daily would be selected below",_dest_hourly_parking_cost,"np.where(_dest_hourly_parking_cost_temp.isna(), 999, _dest_hourly_parking_cost_temp)"
,_daily_parking_cost,"np.where(is_mandatory, np.minimum(_dest_hourly_parking_cost * df.duration/2*100, _dest_daily_parking_cost*100), np.where(_dest_hourly_parking_cost!=999, _dest_hourly_parking_cost * df.duration/2 * 100,0))"
,daily_parking_cost,"np.where(_free_parking_available, 0, _daily_parking_cost)"
#,,
,distance,od_skims['DIST']
,sov_available,(odt_skims['SOV_TIME']>0) & (dot_skims['SOV_TIME']>0)
,hov2_available,(odt_skims['HOV2_TIME'] + dot_skims['HOV2_TIME'])>0
,hov3_available,(odt_skims['HOV3_TIME']>0) & (dot_skims['HOV3_TIME']>0)
#,,
destination in central business district,destination_in_cbd,"(reindex(land_use.AreaType, df[dest_col_name]) < setting('cbd_threshold')) * 1"
#,,FIXME diagnostic
#,sov_dist_rt,(odt_skims['SOV_DIST'] + dot_skims['SOV_DIST'])
,umich_affiliate,"df.get('umich_worker', default=False) | df.get('umich_student', default=False)"
#,,fare discounts (no discount for use in logsums)
#,ptype,df.ptype if _DF_IS_TOUR else 1
#,transit_pass_ownership,df.transit_pass_ownership if _DF_IS_TOUR else 0
#,transit_pass_subsidy,df.transit_pass_subsidy if _DF_IS_TOUR else 0
#,tour_type,df.tour_type if _DF_IS_TOUR else 'other'
#,fare_nopass_discount_percent,"ptype.map({k: v for k, v in transit_nopass_fare_discount_percent.items()})"
#,fare_pass_discount_percent,"ptype.map({k: v for k, v in transit_pass_fare_discount_percent.items()})"
#,fare_subsidy_discount_percent,"np.where(tour_type=='work', transit_subsidy_fare_discount_percent_worktour, 0)"
#,fare_discount_percent_ff,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), 0, 1)"
#,fare_discount_percent_tf,"np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), fare_pass_discount_percent, 1)"
#,fare_discount_percent_ft,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), fare_nopass_discount_percent * (1-fare_subsidy_discount_percent), 1)"
#,fare_discount_percent_tt,"np.where((transit_pass_ownership == True ) & (transit_pass_subsidy == True), fare_pass_discount_percent * (1-fare_subsidy_discount_percent), 1)"
#,fare_discount_percent,fare_discount_percent_ff * fare_discount_percent_tf * fare_discount_percent_ft * fare_discount_percent_tt
#,,
,ptype,df.ptype if _DF_IS_TOUR else 1
,transit_pass_ownership,df.transit_pass_ownership if _DF_IS_TOUR else 0
,transit_pass_subsidy,df.transit_pass_subsidy if _DF_IS_TOUR else 0
cash discounts for seniors and students and preKs,transit_cash_discount_factor,"np.where((df.age>64) | (ptype>5), cash_discount_factor, 1)"
100% subsidy if own subsidy,transit_subsidy_factor,"np.where(transit_pass_subsidy, 1, 0)"
,pass_discount_factor_ddot,"ptype.map({k: v for k, v in transit_pass_discount_factor_ddot.items()})"
,pass_discount_factor_smart,"ptype.map({k: v for k, v in transit_pass_discount_factor_smart.items()})"
,pass_discount_factor_aata,"ptype.map({k: v for k, v in transit_pass_discount_factor_aata.items()})"
,pass_discount_factor_um,"ptype.map({k: v for k, v in transit_pass_discount_factor_um.items()})"
,pass_discount_factor_other,"ptype.map({k: v for k, v in transit_pass_discount_factor_other.items()})"
#,pass discount differs by ptype and agency,
,WLKLOC_pass_discount_DDOT,"np.where((odt_skims['WLK_LOC_IVTT_DDOT']>0), pass_discount_factor_ddot, 1)"
,PNRLOC_pass_discount_DDOT,"np.where((odt_skims['PNR_LOC_IVTT_DDOT']>0), pass_discount_factor_ddot, 1)"
,KNRLOC_pass_discount_DDOT,"np.where((odt_skims['KNR_LOC_IVTT_DDOT']>0), pass_discount_factor_ddot, 1)"
,WLKLOC_pass_discount_SMART,"np.where((odt_skims['WLK_LOC_IVTT_SMART']>0), pass_discount_factor_smart, 1)"
,PNRLOC_pass_discount_SMART,"np.where((odt_skims['PNR_LOC_IVTT_SMART']>0), pass_discount_factor_smart, 1)"
,KNRLOC_pass_discount_SMART,"np.where((odt_skims['KNR_LOC_IVTT_SMART']>0), pass_discount_factor_smart, 1)"
,WLKLOC_pass_discount_AATA,"np.where((odt_skims['WLK_LOC_IVTT_AAATA']>0), pass_discount_factor_aata, 1)"
,PNRLOC_pass_discount_AATA,"np.where((odt_skims['PNR_LOC_IVTT_AAATA']>0), pass_discount_factor_aata, 1)"
,KNRLOC_pass_discount_AATA,"np.where((odt_skims['KNR_LOC_IVTT_AAATA']>0), pass_discount_factor_aata, 1)"
,WLKLOC_pass_discount_UM,"np.where((odt_skims['WLK_LOC_IVTT_UMT']>0), pass_discount_factor_um, 1)"
,PNRLOC_pass_discount_UM,"np.where((odt_skims['PNR_LOC_IVTT_UMT']>0), pass_discount_factor_um, 1)"
,KNRLOC_pass_discount_UM,"np.where((odt_skims['KNR_LOC_IVTT_UMT']>0), pass_discount_factor_um, 1)"
,WLKLOC_pass_discount_OTHER,"np.where((odt_skims['WLK_LOC_IVTT_BWAT']>0) | (odt_skims['WLK_LOC_IVTT_LET']>0), pass_discount_factor_other, 1)"
,PNRLOC_pass_discount_OTHER,"np.where((odt_skims['PNR_LOC_IVTT_BWAT']>0) | (odt_skims['PNR_LOC_IVTT_LET']>0), pass_discount_factor_other, 1)"
,KNRLOC_pass_discount_OTHER,"np.where((odt_skims['KNR_LOC_IVTT_BWAT']>0) | (odt_skims['KNR_LOC_IVTT_LET']>0), pass_discount_factor_other, 1)"
,WLKPRM_pass_discount_OTHER,"np.where((odt_skims['WLK_PRM_IVTT_PMov']>0) | (odt_skims['WLK_PRM_IVTT_StCar']>0), pass_discount_factor_other, 1)"
,PNRPRM_pass_discount_OTHER,"np.where((odt_skims['PNR_PRM_IVTT_PMov']>0) | (odt_skims['PNR_PRM_IVTT_LET']>0), pass_discount_factor_other, 1)"
,KNRPRM_pass_discount_OTHER,"np.where((odt_skims['KNR_PRM_IVTT_PMov']>0) | (odt_skims['KNR_PRM_IVTT_StCar']>0), pass_discount_factor_other, 1)"
,WLKMIX_pass_discount_DDOT,"np.where((odt_skims['WLK_MIX_IVTT_DDOT']>0), pass_discount_factor_ddot, 1)"
,PNRMIX_pass_discount_DDOT,"np.where((odt_skims['PNR_MIX_IVTT_DDOT']>0), pass_discount_factor_ddot, 1)"
,KNRMIX_pass_discount_DDOT,"np.where((odt_skims['KNR_MIX_IVTT_DDOT']>0), pass_discount_factor_ddot, 1)"
,WLKMIX_pass_discount_SMART,"np.where((odt_skims['WLK_MIX_IVTT_SMART']>0), pass_discount_factor_smart, 1)"
,PNRMIX_pass_discount_SMART,"np.where((odt_skims['PNR_MIX_IVTT_SMART']>0), pass_discount_factor_smart, 1)"
,KNRMIX_pass_discount_SMART,"np.where((odt_skims['KNR_MIX_IVTT_SMART']>0), pass_discount_factor_smart, 1)"
,WLKMIX_pass_discount_AATA,"np.where((odt_skims['WLK_MIX_IVTT_AAATA']>0), pass_discount_factor_aata, 1)"
,PNRMIX_pass_discount_AATA,"np.where((odt_skims['PNR_MIX_IVTT_AAATA']>0), pass_discount_factor_aata, 1)"
,KNRMIX_pass_discount_AATA,"np.where((odt_skims['KNR_MIX_IVTT_AAATA']>0), pass_discount_factor_aata, 1)"
,WLKMIX_pass_discount_UM,"np.where((odt_skims['WLK_MIX_IVTT_UMT']>0), pass_discount_factor_um, 1)"
,PNRMIX_pass_discount_UM,"np.where((odt_skims['PNR_MIX_IVTT_UMT']>0), pass_discount_factor_um, 1)"
,KNRMIX_pass_discount_UM,"np.where((odt_skims['KNR_MIX_IVTT_UMT']>0), pass_discount_factor_um, 1)"
,WLKMIX_pass_discount_OTHER,"np.where((odt_skims['WLK_MIX_IVTT_BWAT']>0) | (odt_skims['WLK_MIX_IVTT_LET']>0) | (odt_skims['WLK_PRM_IVTT_PMov']>0) | (odt_skims['WLK_PRM_IVTT_StCar']>0), pass_discount_factor_other, 1)"
,PNRMIX_pass_discount_OTHER,"np.where((odt_skims['PNR_MIX_IVTT_BWAT']>0) | (odt_skims['PNR_MIX_IVTT_LET']>0) | (odt_skims['PNR_MIX_IVTT_PMov']>0) | (odt_skims['PNR_MIX_IVTT_StCar']>0), pass_discount_factor_other, 1)"
,KNRMIX_pass_discount_OTHER,"np.where((odt_skims['KNR_MIX_IVTT_BWAT']>0) | (odt_skims['KNR_MIX_IVTT_LET']>0) | (odt_skims['KNR_MIX_IVTT_PMov']>0) | (odt_skims['KNR_MIX_IVTT_StCar']>0), pass_discount_factor_other, 1)"
#,Use the defined hierarchy to pick the pass discount for each transit alt,
,WLKLOC_pass_discount,"np.where(WLKLOC_pass_discount_DDOT<1, WLKLOC_pass_discount_DDOT, np.where(WLKLOC_pass_discount_SMART<1, WLKLOC_pass_discount_SMART, np.where(WLKLOC_pass_discount_AATA<1, WLKLOC_pass_discount_AATA, WLKLOC_pass_discount_OTHER)))"
,WLKPRM_pass_discount,WLKPRM_pass_discount_OTHER
,WLKMIX_pass_discount,"np.where(WLKMIX_pass_discount_DDOT<1, WLKMIX_pass_discount_DDOT, np.where(WLKMIX_pass_discount_SMART<1, WLKMIX_pass_discount_SMART, np.where(WLKMIX_pass_discount_AATA<1, WLKMIX_pass_discount_AATA, WLKMIX_pass_discount_OTHER)))"
,PNRLOC_pass_discount,"np.where(PNRLOC_pass_discount_DDOT<1, PNRLOC_pass_discount_DDOT, np.where(PNRLOC_pass_discount_SMART<1, PNRLOC_pass_discount_SMART, np.where(PNRLOC_pass_discount_AATA<1, PNRLOC_pass_discount_AATA, PNRLOC_pass_discount_OTHER)))"
,PNRPRM_pass_discount,PNRPRM_pass_discount_OTHER
,PNRMIX_pass_discount,"np.where(PNRMIX_pass_discount_DDOT<1, PNRMIX_pass_discount_DDOT, np.where(PNRMIX_pass_discount_SMART<1, PNRMIX_pass_discount_SMART, np.where(PNRMIX_pass_discount_AATA<1, PNRMIX_pass_discount_AATA, PNRMIX_pass_discount_OTHER)))"
,KNRLOC_pass_discount,"np.where(KNRLOC_pass_discount_DDOT<1, KNRLOC_pass_discount_DDOT, np.where(KNRLOC_pass_discount_SMART<1, KNRLOC_pass_discount_SMART, np.where(KNRLOC_pass_discount_AATA<1, KNRLOC_pass_discount_AATA, KNRLOC_pass_discount_OTHER)))"
,KNRPRM_pass_discount,KNRPRM_pass_discount_OTHER
,KNRMIX_pass_discount,"np.where(KNRMIX_pass_discount_DDOT<1, KNRMIX_pass_discount_DDOT, np.where(KNRMIX_pass_discount_SMART<1, KNRMIX_pass_discount_SMART, np.where(KNRMIX_pass_discount_AATA<1, KNRMIX_pass_discount_AATA, KNRMIX_pass_discount_OTHER)))"
#,"Now compute the fare discounts using cash, subsidy, and pass discounts",
,WLKLOC_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), WLKLOC_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), WLKLOC_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,WLKPRM_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), WLKPRM_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), WLKPRM_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,WLKMIX_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), WLKMIX_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), WLKMIX_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,PNRLOC_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), PNRLOC_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), PNRLOC_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,PNRPRM_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), PNRPRM_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), PNRPRM_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,PNRMIX_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), PNRMIX_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), PNRMIX_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,KNRLOC_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), KNRLOC_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), KNRLOC_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,KNRPRM_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), KNRPRM_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), KNRPRM_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
,KNRMIX_fare_discount,"np.where((transit_pass_ownership == False) & (transit_pass_subsidy == False), transit_cash_discount_factor, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == False), KNRMIX_pass_discount, np.where((transit_pass_ownership == True) & (transit_pass_subsidy == True), KNRMIX_pass_discount * (1-transit_subsidy_factor), np.where((transit_pass_ownership == False) & (transit_pass_subsidy == True), transit_cash_discount_factor * (1-transit_subsidy_factor), 1))))"
#,,
Determining Tour Origin,origin,df.origin if 'origin' in df.columns else df.home_zone_id if 'home_zone_id' in df.columns else df.workplace_zone_id
Determining Tour Destination,destination,df.destination if 'destination' in df.columns else df.alt_dest
#access egress distances,,
,origin_local_dist,"reindex(land_use.AE_LOCAL, origin)"
,origin_prm_dist,"reindex(land_use.AE_PRM, origin)"
min of local and premium dist,origin_mix_dist,"np.minimum(origin_local_dist, origin_prm_dist)"
,dest_local_dist,"reindex(land_use.AE_LOCAL, destination)"
,dest_prm_dist,"reindex(land_use.AE_PRM, destination)"
,dest_mix_dist,"np.minimum(dest_local_dist, dest_prm_dist)"
#transit availability,,
,walk_local_available,walk_transit_available & (odt_skims['WLK_LOC_IVT']>0) & (dot_skims['WLK_LOC_IVT']>0) & (origin_local_dist < max_local_walk_dist) & (dest_local_dist < max_local_walk_dist)
,walk_premium_available,walk_transit_available & (odt_skims['WLK_PRM_IVT']>0) & (dot_skims['WLK_PRM_IVT']>0) & (origin_prm_dist < max_prm_walk_dist) & (dest_prm_dist < max_prm_walk_dist)
,walk_mix_available,walk_transit_available & (odt_skims['WLK_MIX_IVT']>0) & (dot_skims['WLK_MIX_IVT']>0) & (origin_mix_dist < max_mix_walk_dist) & (dest_mix_dist < max_mix_walk_dist)
,pnr_local_available,pnr_transit_available & (odt_skims['PNR_LOC_IVT']>0) & (dot_skims['PNRE_LOC_IVT']>0) & (dest_local_dist < max_local_walk_dist)
,pnr_premium_available,pnr_transit_available & (odt_skims['PNR_PRM_IVT']>0) & (dot_skims['PNRE_PRM_IVT']>0) & (dest_prm_dist < max_prm_walk_dist)
,pnr_mix_available,pnr_transit_available & (odt_skims['PNR_MIX_IVT']>0) & (dot_skims['PNRE_MIX_IVT']>0) & (dest_mix_dist < max_mix_walk_dist)
,knr_local_available,knr_transit_available & (odt_skims['KNR_LOC_IVT']>0) & (dot_skims['KNRE_LOC_IVT']>0) & (dest_local_dist < max_local_walk_dist)
,knr_premium_available,knr_transit_available & (odt_skims['KNR_PRM_IVT']>0) & (dot_skims['KNRE_PRM_IVT']>0) & (dest_prm_dist < max_prm_walk_dist)
,knr_mix_available,knr_transit_available & (odt_skims['KNR_MIX_IVT']>0) & (dot_skims['KNRE_MIX_IVT']>0) & (dest_mix_dist < max_mix_walk_dist)
#access egress times,,
,origin_local_time,origin_local_dist * 60/walk_speed
,origin_prm_time,origin_prm_dist * 60/walk_speed
,origin_mix_time,origin_mix_dist * 60/walk_speed
,dest_local_time,dest_local_dist * 60/walk_speed
,dest_prm_time,dest_prm_dist * 60/walk_speed
,dest_mix_time,dest_mix_dist * 60/walk_speed
#,,
,PMOV_transit,"np.where(((odt_skims['WLK_PRM_IVTT_PMov']>0) & (dot_skims['WLK_PRM_IVTT_PMov']>0)) | ((odt_skims['PNR_PRM_IVTT_PMov']>0) & (dot_skims['PNRE_PRM_IVTT_PMov']>0)) | ((odt_skims['KNR_PRM_IVTT_PMov']>0) & (dot_skims['KNRE_PRM_IVTT_PMov']>0)) & ((odt_skims['WLK_MIX_NT']==0)&(odt_skims['PNR_MIX_NT']==0)&(odt_skims['KNR_MIX_NT']==0)&(odt_skims['PNRE_MIX_NT']==0)&(odt_skims['KNRE_MIX_NT']==0)),1,0)"
,PMOV_transit_wTransfer,"np.where(((odt_skims['WLK_PRM_IVTT_PMov']>0) & (dot_skims['WLK_PRM_IVTT_PMov']>0)) | ((odt_skims['PNR_PRM_IVTT_PMov']>0) & (dot_skims['PNRE_PRM_IVTT_PMov']>0)) | ((odt_skims['KNR_PRM_IVTT_PMov']>0) & (dot_skims['KNRE_PRM_IVTT_PMov']>0)) & ((odt_skims['WLK_PRM_NT']>0)|(odt_skims['PNR_PRM_NT']>0)|(odt_skims['KNR_PRM_NT']>0)|(odt_skims['PNRE_PRM_NT']>0)|(odt_skims['KNRE_PRM_NT']>0)),1,0)"
,StCar_transit,"np.where((((odt_skims['WLK_PRM_IVTT_StCar']>0) & (dot_skims['WLK_PRM_IVTT_StCar']>0)) | ((odt_skims['PNR_PRM_IVTT_StCar']>0) & (dot_skims['PNRE_PRM_IVTT_StCar']>0)) | ((odt_skims['KNR_PRM_IVTT_StCar']>0) & (dot_skims['KNRE_PRM_IVTT_StCar']>0))) & ((odt_skims['WLK_MIX_NT']==0)&(odt_skims['PNR_MIX_NT']==0)&(odt_skims['KNR_MIX_NT']==0)&(odt_skims['PNRE_MIX_NT']==0)&(odt_skims['KNRE_MIX_NT']==0)),1,0)"
,StCar_transit_wTransfer,"np.where((((odt_skims['WLK_PRM_IVTT_StCar']>0) & (dot_skims['WLK_PRM_IVTT_StCar']>0)) | ((odt_skims['PNR_PRM_IVTT_StCar']>0) & (dot_skims['PNRE_PRM_IVTT_StCar']>0)) | ((odt_skims['KNR_PRM_IVTT_StCar']>0) & (dot_skims['KNRE_PRM_IVTT_StCar']>0))) & ((odt_skims['WLK_PRM_NT']>0)&(odt_skims['PNR_PRM_NT']>0)&(odt_skims['KNR_PRM_NT']>0)&(odt_skims['PNRE_PRM_NT']>0)&(odt_skims['KNRE_PRM_NT']>0)),1,0)"
,AATA_transit,"np.where(((odt_skims['WLK_LOC_IVTT_AAATA']>0) & (dot_skims['WLK_LOC_IVTT_AAATA']>0)) | ((odt_skims['PNR_LOC_IVTT_AAATA']>0) & (dot_skims['PNRE_LOC_IVTT_AAATA']>0)) | ((odt_skims['KNR_LOC_IVTT_AAATA']>0) & (dot_skims['KNRE_LOC_IVTT_AAATA']>0)),1,0)"
