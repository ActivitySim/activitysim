Description,Expression,work,univ,school,escort,shopping,eatout,othmaint,social,othdiscr,atwork
All - Sample of alternatives correction factor,"@np.minimum(np.log(df.pick_count/df.prob), 60)",1,1,1,1,1,1,1,1,1,1
All - Mode choice logsum from origin to stop,od_logsum,1.821,1.821,1.821,1.821,1.821,1.821,1.821,1.821,1.821,1.821
All - Can't access stop zone by this tour mode,(od_logsum < -100),-999,-999,-999,-999,-999,-999,-999,-999,-999,-999
All - Mode choice logsum from stop to destination,dp_logsum,1.821,1.821,1.821,1.821,1.821,1.821,1.821,1.821,1.821,1.821
All - Can't access destination zone by this tour mode,(dp_logsum < -100),-999,-999,-999,-999,-999,-999,-999,-999,-999,-999
All - Tour origin zone,@(df.origin == df.dest_zone_id),0.7112,0.7112,0.7112,0.7112,0.7112,0.7112,0.7112,0.7112,0.7112,0.7112
All - Tour destinatoin zone,@(df.destination == df.dest_zone_id),1.037,1.037,1.037,1.037,1.037,1.037,1.037,1.037,1.037,1.037
"# dest_zone_id is not available in the preprocessor file and reindex is not available here, so the expression was commented out. Similar expression was commented out in the ActivitySim example file as well. ",,,,,,,,,,,
# All - CBD area type,"@reindex(land_use.areatype, df.dest_zone_id) == 1",-0.285,-0.285,-0.285,-0.285,-0.285,-0.285,-0.285,-0.285,-0.285,-0.285
All - Size variable ,"@np.log1p(size_terms.get(df.dest_zone_id, df.purpose))",1,1,1,1,1,1,1,1,1,1
All - No attractions,"@size_terms.get(df.dest_zone_id, df.purpose) == 0",-999,-999,-999,-999,-999,-999,-999,-999,-999,-999
#Applied the conventions used in the destination sample file,,,,,,,,,,,
,"_org_to_stop_dist@od_skims[('SOV_FREE_DISTANCE', 'MD')]",1,1,1,1,1,1,1,1,1,1
,"_stop_to_dest_dist@dp_skims[('SOV_FREE_DISTANCE', 'MD')]",1,1,1,1,1,1,1,1,1,1
# THIS IS WRONG ***** RIGHT HERE **** I CHANGED THE BELOW TO MAKE WORK MECHANICALLY ,,,,,,,,,,,
# ,"_od_distance@op_skims[('SOV_FREE_DISTANCE', 'MD')]",1,1,1,1,1,1,1,1,1,1
,"_od_distance@od_skims[('SOV_FREE_DISTANCE', 'MD')]",1,1,1,1,1,1,1,1,1,1
#WORK,,,,,,,,,,,
WORK - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",0.0026,,,,,,,,,
WORK - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",-0.0000109,,,,,,,,,
WORK - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",-0.3218,,,,,,,,,
WORK - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",0.00873,,,,,,,,,
"#sequential stop number is not available in ActivitySim, so use trip_num",,,,,,,,,,,
WORK - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",-0.00269,,,,,,,,,
WORK - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.01045,,,,,,,,,
WORK - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",0.002442,,,,,,,,,
WORK - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",-0.01308,,,,,,,,,
WORK - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",0,,,,,,,,,
WORK - Distance - work stop purpose,"@(df.purpose == 'work') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.195,,,,,,,,,
WORK - Distance - escort stop purpose,"@(df.purpose == 'escort') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.2596,,,,,,,,,
WORK - Distance - shopping stop purpose,"@(df.purpose == 'shopping') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.286,,,,,,,,,
WORK - Distance - eat out stop purpose,"@(df.purpose == 'eatout') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.2927,,,,,,,,,
WORK - Distance - other maintenance stop purpose,"@(df.purpose == 'othmaint') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.2196,,,,,,,,,
WORK - Distance - social/visiting stop purpose,"@(df.purpose == 'social') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.3061,,,,,,,,,
WORK - Distance - other discretionary stop purpose,"@(df.purpose == 'othdiscr') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",-0.2999,,,,,,,,,
WORK - Distance (calibration adjustment),"@(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",0.1877,,,,,,,,,
WORK - constant for transit tours (stop w/in walking distance of home,"@np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",-3,,,,,,,,,
WORK - constant for transit tours (stop w/in walking distance of prim dest,"@np.where(((df.outbound) & (df.trip_num==1) & (dp_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",-5,,,,,,,,,
WORK - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10), 0)",1.1,,,,,,,,,
WORK - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10)) ** 2, 0)",-0.1906899,,,,,,,,,
WORK - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10)) ** 3, 0)",0.0091819,,,,,,,,,
WORK - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",-0.7371159,,,,,,,,,
WORK - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10) < 0, 1, 0)",1.119608865,,,,,,,,,
"# Distance differs by purpose, so separate expressions are required",,,,,,,,,,,
# UNIVERSITY ,,,,,,,,,,,
UNIVERSITY - Distance squared,"@((np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)) ** 2)",,0.0026,,,,,,,,
UNIVERSITY - Distance cubed,"@((np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)) ** 3)",,-0.0000109,,,,,,,,
UNIVERSITY - Log of distance,"@np.log(np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,-0.3218,,,,,,,,
UNIVERSITY - Distance - return half tour,"@(~df.outbound) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,0.00873,,,,,,,,
UNIVERSITY - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,-0.00269,,,,,,,,
UNIVERSITY - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,-0.01045,,,,,,,,
UNIVERSITY - Distance - shared ride tour,"@((df.tour_mode_is_shared_ride) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,0.002442,,,,,,,,
UNIVERSITY - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,-0.01308,,,,,,,,
UNIVERSITY - Distance - transit tour,"@((df.tour_mode_is_transit) *(np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,0,,,,,,,,
UNIVERSITY - Distance - work stop purpose,"@((df.purpose == 'work') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.195,,,,,,,,
UNIVERSITY - Distance - escort stop purpose,"@((df.purpose == 'escort') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.2596,,,,,,,,
UNIVERSITY - Distance - shopping stop purpose,"@((df.purpose == 'shopping') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.286,,,,,,,,
UNIVERSITY - Distance - eat out stop purpose,"@((df.purpose == 'eatout') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.2927,,,,,,,,
UNIVERSITY - Distance - other maintenance stop purpose,"@((df.purpose == 'othmaint') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.2196,,,,,,,,
UNIVERSITY - Distance - social/visiting stop purpose,"@((df.purpose == 'social') *  (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.3061,,,,,,,,
UNIVERSITY - Distance - other discretionary stop purpose,"@((df.purpose == 'othdiscr') *  (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,-0.2999,,,,,,,,
UNIVERSITY - distance (calibration adjustment),"@(np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,0,,,,,,,,
UNIVERSITY - constant for transit tours (stop w/in walking distance of home,"@(np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0))",,-3,,,,,,,,
UNIVERSITY - constant for transit tours (stop w/in walking distance of prim dest,"@(np.where(((df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0))",,-5,,,,,,,,
UNIVERSITY - OOD Distance,"@np.where (np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 10) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10), 0)",,0.1843125,,,,,,,,
UNIVERSITY - OOD Distance squared,"@np.where (np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 10) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10)) ** 2, 0)",,-0.1722496,,,,,,,,
UNIVERSITY - OOD Distance cubed,"@np.where (np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 10) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10)) ** 3, 0)",,0.0096203,,,,,,,,
UNIVERSITY - Log of OOD distance,"@np.where(np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,0,,,,,,,,
UNIVERSITY - Negative OOD,"@np.where(np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 10) < 0, 1, 0)",,1.71461471,,,,,,,,
# SCHOOL,,,,,,,,,,,
SCHOOL - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,0.0026,,,,,,,
SCHOOL - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,-0.0000109,,,,,,,
SCHOOL - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,-0.3218,,,,,,,
SCHOOL - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,0.00873,,,,,,,
SCHOOL - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.00269,,,,,,,
SCHOOL - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.01045,,,,,,,
SCHOOL - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,0.002442,,,,,,,
SCHOOL - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,-0.01308,,,,,,,
SCHOOL - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,0,,,,,,,
SCHOOL - Distance - work stop purpose,"@(df.purpose == 'work') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.195,,,,,,,
SCHOOL - Distance - escort stop purpose,"@(df.purpose == 'escort') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.2596,,,,,,,
SCHOOL - Distance - shopping stop purpose,"@(df.purpose == 'shopping') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.286,,,,,,,
SCHOOL - Distance - eat out stop purpose,"@(df.purpose == 'eatout') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.2927,,,,,,,
SCHOOL - Distance - other maintenance stop purpose,"@(df.purpose == 'othmaint') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.2196,,,,,,,
SCHOOL - Distance - social/visiting stop purpose,"@(df.purpose == 'social') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.3061,,,,,,,
SCHOOL - Distance - other discretionary stop purpose,"@(df.purpose == 'othdiscr') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,-0.2999,,,,,,,
SCHOOL - distance (calibration adjustment),"@(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,0,,,,,,,
SCHOOL - constant for transit tours (stop w/in walking distance of home,"@np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,-3,,,,,,,
SCHOOL - constant for transit tours (stop w/in walking distance of prim dest,"@np.where(((df.outbound) & (df.trip_num==1) & (dp_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,-5,,,,,,,
SCHOOL - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9), 0)",,,1.7008853,,,,,,,
SCHOOL - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 2, 0)",,,-0.3098545,,,,,,,
SCHOOL - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 3, 0)",,,0.0155371,,,,,,,
SCHOOL - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,,-0.5,,,,,,,
SCHOOL - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 10) < 0, 1, 0)",,,1.462194456,,,,,,,
SCHOOL - Negative propensity for OOD > 8 miles,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 8, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50), 0)",,,0,,,,,,,
SCHOOL - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 1), 1, 0)",,,0.1,,,,,,,
# ESCORT,,,,,,,,,,,
ESCORT - Distance squared,"@((np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)) ** 2)",,,,0.0026,,,,,,
ESCORT - Distance cubed,"@((np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)) ** 3)",,,,-0.0000109,,,,,,
ESCORT - Log of distance,"@np.log(np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,,,-0.3218,,,,,,
ESCORT - Distance - return half tour,"@(~df.outbound) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,,,0.00873,,,,,,
ESCORT - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,,,-0.00269,,,,,,
ESCORT - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,,,-0.01045,,,,,,
ESCORT - Distance - shared ride tour,"@((df.tour_mode_is_shared_ride) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,0.002442,,,,,,
ESCORT - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,,,-0.01308,,,,,,
ESCORT - Distance - transit tour,"@((df.tour_mode_is_transit) *(np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,0,,,,,,
ESCORT - Distance - work stop purpose,"@((df.purpose == 'work') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.195,,,,,,
ESCORT - Distance - escort stop purpose,"@((df.purpose == 'escort') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.2596,,,,,,
ESCORT - Distance - shopping stop purpose,"@((df.purpose == 'shopping') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.286,,,,,,
ESCORT - Distance - eat out stop purpose,"@((df.purpose == 'eatout') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.2927,,,,,,
ESCORT - Distance - other maintenance stop purpose,"@((df.purpose == 'othmaint') * (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.2196,,,,,,
ESCORT - Distance - social/visiting stop purpose,"@((df.purpose == 'social') *  (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.3061,,,,,,
ESCORT - Distance - other discretionary stop purpose,"@((df.purpose == 'othdiscr') *  (np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8)))",,,,-0.2999,,,,,,
ESCORT - distance (calibration adjustment),"@(np.minimum((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 8))",,,,0,,,,,,
ESCORT - constant for transit tours (stop w/in walking distance of home,"@(np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0))",,,,-3,,,,,,
ESCORT - constant for transit tours (stop w/in walking distance of prim dest,"@(np.where(((df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0))",,,,-5,,,,,,
ESCORT - OOD Distance,"@np.where (np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 11) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 11), 0)",,,,1.55,,,,,,
ESCORT - OOD Distance squared,"@np.where (np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 11) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 11)) ** 2, 0)",,,,-0.2751715,,,,,,
ESCORT - OOD Distance cubed,"@np.where (np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 11) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 11)) ** 3, 0)",,,,0.0146333,,,,,,
ESCORT - Log of OOD distance,"@np.where(np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,,,-0.8910575,,,,,,
ESCORT - Negative OOD,"@np.where(np.minimum((np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 8) - _od_distance), 10) < 0, 1, 0)",,,,2.854201327,,,,,,
ESCORT - Logarithm term applied to all distances,"@np.where(((_org_to_stop_dist + _stop_to_dest_dist) > 8), np.log(np.minimum((_org_to_stop_dist + _stop_to_dest_dist), 50)), 0)",,,,-0.3218,,,,,,
# SHOPPING,,,,,,,,,,,
SHOPPING - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,,,0.0026,,,,,
SHOPPING - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,,,-0.0000109,,,,,
SHOPPING - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,-0.3218,,,,,
SHOPPING - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,0.00873,,,,,
SHOPPING - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,-0.00269,,,,,
SHOPPING - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,-0.01045,,,,,
SHOPPING - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,0.002442,,,,,
SHOPPING - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,-0.01308,,,,,
SHOPPING - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,,,0,,,,,
SHOPPING - indiv tour distance - work stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.195,,,,,
SHOPPING - indiv tour distance - escort stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2596,,,,,
SHOPPING - indiv tour distance - shopping stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.286,,,,,
SHOPPING - indiv tour distance - eat out stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2927,,,,,
SHOPPING - indiv tour distance - other maintenance stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2196,,,,,
SHOPPING - indiv tour distance - social/visiting stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.3061,,,,,
SHOPPING - indiv tour distance - other discretionary stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2999,,,,,
SHOPPING - joint tour distance - work stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.195,,,,,
SHOPPING - joint tour distance - escort stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2596,,,,,
SHOPPING - joint tour distance - shopping stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.286,,,,,
SHOPPING - joint tour distance - eat out stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2927,,,,,
SHOPPING - joint tour distance - other maintenance stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2196,,,,,
SHOPPING - joint tour distance - social/visiting stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.3061,,,,,
SHOPPING - joint tour distance - other discretionary stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,-0.2999,,,,,
SHOPPING - distance (calibration adjustment individual),"@np.where((~df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,0.1534,,,,,
SHOPPING - distance (calibration adjustment joint),"@np.where((df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,0.1766,,,,,
SHOPPING - constant for transit tours (stop w/in walking distance of home,"@np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,,,-3,,,,,
SHOPPING - constant for transit tours (stop w/in walking distance of prim dest,"@np.where(((df.outbound) & (df.trip_num==1) & (dp_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,,,-5,,,,,
SHOPPING - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9), 0)",,,,,0.6068811,,,,,
SHOPPING - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 2, 0)",,,,,-0.1338292,,,,,
SHOPPING - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 3, 0)",,,,,0.0069841,,,,,
SHOPPING - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,,,,-0.2722206,,,,,
SHOPPING - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 0, 1, 0)",,,,,1.006122015,,,,,
SHOPPING - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 1), 1, 0)",,,,,0.2,,,,,
# EATOUT,,,,,,,,,,,
EATOUT - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,,,,0.0026,,,,
EATOUT - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,,,,-0.0000109,,,,
EATOUT - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,-0.3218,,,,
EATOUT - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,0.00873,,,,
EATOUT - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,-0.00269,,,,
EATOUT - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,-0.01045,,,,
EATOUT - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,0.002442,,,,
EATOUT - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,-0.01308,,,,
EATOUT - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,,,,0,,,,
EATOUT - indiv tour distance - work stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.195,,,,
EATOUT - indiv tour distance - escort stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2596,,,,
EATOUT - indiv tour distance - shopping stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.286,,,,
EATOUT - indiv tour distance - eat out stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2927,,,,
EATOUT - indiv tour distance - other maintenance stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2196,,,,
EATOUT - indiv tour distance - social/visiting stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.3061,,,,
EATOUT - indiv tour distance - other discretionary stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2999,,,,
EATOUT - joint tour distance - work stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.195,,,,
EATOUT - joint tour distance - escort stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2596,,,,
EATOUT - joint tour distance - shopping stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.286,,,,
EATOUT - joint tour distance - eat out stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2927,,,,
EATOUT - joint tour distance - other maintenance stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2196,,,,
EATOUT - joint tour distance - social/visiting stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.3061,,,,
EATOUT - joint tour distance - other discretionary stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,-0.2999,,,,
EATOUT - distance (calibration adjustment individual),"@np.where((~df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,0.1489,,,,
EATOUT - distance (calibration adjustment joint),"@np.where((df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,0.1938,,,,
EATOUT - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9), 0)",,,,,,0.55,,,,
EATOUT - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 2, 0)",,,,,,-0.1271654,,,,
EATOUT - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 3, 0)",,,,,,0.0076428,,,,
EATOUT - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,,,,,-0.2902516,,,,
EATOUT - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 0, 1, 0)",,,,,,0.143281489,,,,
EATOUT - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 1), 1, 0)",,,,,,0.2,,,,
#OTHER MAINTENANCE,,,,,,,,,,,
MAINTENANCE - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,,,,,0.0026,,,
MAINTENANCE - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,,,,,-0.0000109,,,
MAINTENANCE - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,-0.3218,,,
MAINTENANCE - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,0.00873,,,
MAINTENANCE - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,-0.00269,,,
MAINTENANCE - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,-0.01045,,,
MAINTENANCE - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,0.002442,,,
MAINTENANCE - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,-0.01308,,,
MAINTENANCE - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,,,,,0,,,
MAINTENANCE - indiv tour distance - work stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.195,,,
MAINTENANCE - indiv tour distance - escort stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2596,,,
MAINTENANCE - indiv tour distance - shopping stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.286,,,
MAINTENANCE - indiv tour distance - eat out stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2927,,,
MAINTENANCE - indiv tour distance - other maintenance stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2196,,,
MAINTENANCE - indiv tour distance - social/visiting stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.3061,,,
MAINTENANCE - indiv tour distance - other discretionary stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2999,,,
MAINTENANCE - joint tour distance - work stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.195,,,
MAINTENANCE - joint tour distance - escort stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2596,,,
MAINTENANCE - joint tour distance - shopping stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.286,,,
MAINTENANCE - joint tour distance - eat out stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2927,,,
MAINTENANCE - joint tour distance - other maintenance stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2196,,,
MAINTENANCE - joint tour distance - social/visiting stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.3061,,,
MAINTENANCE - joint tour distance - other discretionary stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,-0.2999,,,
MAINTENANCE - distance (calibration adjustment individual),"@np.where((~df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,0.18,,,
MAINTENANCE - distance (calibration adjustment joint),"@np.where((df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,0.1113,,,
MAINTENANCE - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16), 0)",,,,,,,0.4273304,,,
MAINTENANCE - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16)) ** 2, 0)",,,,,,,-0.063652,,,
MAINTENANCE - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16)) ** 3, 0)",,,,,,,0.0019901,,,
MAINTENANCE - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,,,,,,-0.2692601,,,
MAINTENANCE - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16) < 0, 1, 0)",,,,,,,0.743124288,,,
MAINTENANCE - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 16) < 1), 1, 0)",,,,,,,0.4,,,
#SOCIAL,,,,,,,,,,,
SOCIAL - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,,,,,,0.0026,,
SOCIAL - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,,,,,,-0.0000109,,
SOCIAL - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,-0.3218,,
SOCIAL - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,0.00873,,
SOCIAL - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,-0.00269,,
SOCIAL - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,-0.01045,,
SOCIAL - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,0.002442,,
SOCIAL - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,-0.01308,,
SOCIAL - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,,,,,,0,,
SOCIAL - indiv tour distance - work stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.195,,
SOCIAL - indiv tour distance - escort stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2596,,
SOCIAL - indiv tour distance - shopping stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.286,,
SOCIAL - indiv tour distance - eat out stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2927,,
SOCIAL - indiv tour distance - other maintenance stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2196,,
SOCIAL - indiv tour distance - social/visiting stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.3061,,
SOCIAL - indiv tour distance - other discretionary stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2999,,
SOCIAL - joint tour distance - work stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.195,,
SOCIAL - joint tour distance - escort stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2596,,
SOCIAL - joint tour distance - shopping stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.286,,
SOCIAL - joint tour distance - eat out stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2927,,
SOCIAL - joint tour distance - other maintenance stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2196,,
SOCIAL - joint tour distance - social/visiting stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.3061,,
SOCIAL - joint tour distance - other discretionary stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,-0.2999,,
SOCIAL - distance (calibration adjustment individual),"@np.where((~df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,0.1392,,
SOCIAL - distance (calibration adjustment joint),"@np.where((df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,0.13,,
SOCIAL - constant for transit tours (stop w/in walking distance of home,"@np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,,,,,,-3,,
SOCIAL - constant for transit tours (stop w/in walking distance of prim dest,"@np.where(((df.outbound) & (df.trip_num==1) & (dp_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,,,,,,-5,,
SOCIAL - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9), 0)",,,,,,,,-0.4368483,,
SOCIAL - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 2, 0)",,,,,,,,0.1089924,,
SOCIAL - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 3, 0)",,,,,,,,-0.0076294,,
SOCIAL - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 50)).apply(np.log1p), 0)",,,,,,,,-0.1081128,,
SOCIAL - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 0, 1, 0)",,,,,,,,-0.072029153,,
SOCIAL - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 1), 1, 0)",,,,,,,,0.2,,
#DISCRETIONARY,,,,,,,,,,,
DISCRETIONARY - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,,,,,,,0.0026,
DISCRETIONARY - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,,,,,,,-0.0000109,
DISCRETIONARY - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,-0.3218,
DISCRETIONARY - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,0.00873,
DISCRETIONARY - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,-0.00269,
DISCRETIONARY - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,-0.01045,
DISCRETIONARY - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,0.002442,
DISCRETIONARY - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,-0.01308,
DISCRETIONARY - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,,,,,,,0,
DISCRETIONARY - indiv tour distance - work stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.195,
DISCRETIONARY - indiv tour distance - escort stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2596,
DISCRETIONARY - indiv tour distance - shopping stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.286,
DISCRETIONARY - indiv tour distance - eat out stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2927,
DISCRETIONARY - indiv tour distance - other maintenance stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2196,
DISCRETIONARY - indiv tour distance - social/visiting stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.3061,
DISCRETIONARY - indiv tour distance - other discretionary stop purpose,"@np.where(((~df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2999,
DISCRETIONARY - joint tour distance - work stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'work')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.195,
DISCRETIONARY - joint tour distance - escort stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'escort')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2596,
DISCRETIONARY - joint tour distance - shopping stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'shopping')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.286,
DISCRETIONARY - joint tour distance - eat out stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'eatout')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2927,
DISCRETIONARY - joint tour distance - other maintenance stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othmaint')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2196,
DISCRETIONARY - joint tour distance - social/visiting stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'social')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.3061,
DISCRETIONARY - joint tour distance - other discretionary stop purpose,"@np.where(((df.is_joint) & (df.purpose == 'othdiscr')), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,-0.2999,
DISCRETIONARY - distance (calibration adjustment individual),"@np.where((~df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,0,
DISCRETIONARY - distance (calibration adjustment joint),"@np.where((df.is_joint), (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]), 0)",,,,,,,,,0,
DISCRETIONARY - constant for transit tours (stop w/in walking distance of home,"@np.where(((~df.outbound) & (df.trip_num==1) & (od_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,,,,,,,-3,
DISCRETIONARY - constant for transit tours (stop w/in walking distance of prim dest,"@np.where(((df.outbound) & (df.trip_num==1) & (dp_skims[('SOV_FREE_DISTANCE', 'MD')]<3) & (df.tour_mode_is_transit)), 1, 0)",,,,,,,,,-5,
DISCRETIONARY - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27), 0)",,,,,,,,,0.28,
DISCRETIONARY - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27)) ** 2, 0)",,,,,,,,,-0.0184,
DISCRETIONARY - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27)) ** 3, 0)",,,,,,,,,0.00036,
DISCRETIONARY - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27)).apply(np.log1p), 0)",,,,,,,,,-0.15788,
DISCRETIONARY - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) < 0, 1, 0)",,,,,,,,,-0.072240928,
DISCRETIONARY - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 27) < 1), 1, 0)",,,,,,,,,-0.3737,
#ATWORK,,,,,,,,,,,
ATWORK - Distance squared,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 2)",,,,,,,,,,0.0026
ATWORK - Distance cubed,"@((od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ** 3)",,,,,,,,,,-0.0000109
ATWORK - Log of distance,"@np.log(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,,-0.3218
ATWORK - Distance - return half tour,"@(~df.outbound) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,,0.00873
ATWORK - Distance - 2nd stop of half tour,"@(df.trip_num == 2) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.00269
ATWORK - Distance - 3rd+ stop on half tour,"@(df.trip_num > 3) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.01045
ATWORK - Distance - shared ride tour,"@(df.tour_mode_is_shared_ride) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,,0.002442
ATWORK - Distance - walk/bike tour,"@((df.tour_mode=='WALK')|(df.tour_mode=='BIKE')) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,,-0.01308
ATWORK - Distance - transit tour,"@((df.tour_mode_is_transit) * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]))",,,,,,,,,,0
ATWORK - distance - work stop purpose,"@(df.purpose == 'work') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.195
ATWORK - distance - escort stop purpose,"@(df.purpose == 'escort') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.2596
ATWORK - distance - shopping stop purpose,"@(df.purpose == 'shopping') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.286
ATWORK - distance - eat out stop purpose,"@(df.purpose == 'eatout') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.2927
ATWORK - distance - other maintenance stop purpose,"@(df.purpose == 'othmaint') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.2196
ATWORK - distance - social/visiting stop purpose,"@(df.purpose == 'social') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.3061
ATWORK - distance - other discretionary stop purpose,"@(df.purpose == 'othdiscr') * (od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')]) ",,,,,,,,,,-0.2999
ATWORK - distance (calibration adjustment),"@(od_skims[('SOV_FREE_DISTANCE', 'MD')] + dp_skims[('SOV_FREE_DISTANCE', 'MD')])",,,,,,,,,,0.148
ATWORK - OOD Distance,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9), 0)",,,,,,,,,,0.0080384
ATWORK - OOD Distance squared,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 2, 0)",,,,,,,,,,-0.1285871
ATWORK - OOD Distance cubed,"@np.where (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)) ** 3, 0)",,,,,,,,,,0.0098048
ATWORK - Log of OOD distance,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) > 0, (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9)).apply(np.log1p), 0)",,,,,,,,,,0.4478928
ATWORK - Negative OOD,"@np.where(np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 0, 1, 0)",,,,,,,,,,0.60909173
ATWORK - OOD bin 0 to 1 mile,"@np.where((np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) >= 0) & (np.minimum((_org_to_stop_dist + _stop_to_dest_dist - _od_distance), 9) < 1), 1, 0)",,,,,,,,,,0.2
