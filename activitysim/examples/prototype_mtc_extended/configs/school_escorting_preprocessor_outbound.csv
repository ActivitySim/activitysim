Description,Target,Expression
Number of children going to school,num_children_going_to_school,"np.where(df['child_id1'] > 0, 1, 0) + np.where(df['child_id2'] > 0, 1, 0) + np.where(df['child_id3'] > 0,1,0)"
Number of potential chauffeurs,num_potential_chauffeurs,"np.where(df['chauf_id1'] > 0, 1, 0) + np.where(df['chauf_id2'] > 0, 1, 0)"
Person Type - chauffer 1,ptype_chauf1,"reindex(persons.ptype, df.chauf_id1)"
Person Type - chauffer 2,ptype_chauf2,"reindex(persons.ptype, df.chauf_id2)"
Gender - chauffer 1,gender_chauf1,"reindex(persons.sex, df.chauf_id1)"
Gender - chauffer 2,gender_chauf2,"reindex(persons.sex, df.chauf_id2)"
Age - chauffer 1,age_chauf1,"reindex(persons.age, df.chauf_id1)"
Age - chauffer 2,age_chauf2,"reindex(persons.age, df.chauf_id2)"
Daily activity pattern - chauffer 1,cdap_chauf1,"reindex(persons.cdap_activity, df.chauf_id1)"
Daily activity pattern - chauffer 2,cdap_chauf2,"reindex(persons.cdap_activity, df.chauf_id2)"
Age - child 1,age_child1,"reindex(persons.age, df.child_id1)"
Age - child 2,age_child2,"reindex(persons.age, df.child_id2)"
Age - child 3,age_child3,"reindex(persons.age, df.child_id3)"
# Departure times to school and work
Preferred departure time to school - child 1,pref_depart_time_school1,"reindex(tours[(tours.tour_type == 'school') & (tours.tour_num == 1)].set_index('person_id').start, df.child_id1)"
Preferred departure time to school - child 2,pref_depart_time_school2,"reindex(tours[(tours.tour_type == 'school') & (tours.tour_num == 1)].set_index('person_id').start, df.child_id2)"
Preferred departure time to school - child 3,pref_depart_time_school3,"reindex(tours[(tours.tour_type == 'school') & (tours.tour_num == 1)].set_index('person_id').start, df.child_id3)"
Preferred departure time to work / univ - chauffer 1,pref_depart_time_chauf1,"reindex(tours[(tours.tour_category == 'mandatory') & (tours.tour_num == 1)].set_index('person_id').start, df.chauf_id1)"
Preferred departure time to work / univ - chauffer 2,pref_depart_time_chauf2,"reindex(tours[(tours.tour_category == 'mandatory') & (tours.tour_num == 1)].set_index('person_id').start, df.chauf_id2)"
# Distances and times to school and work
School location - child 1,school_location_child1,"reindex(persons.school_zone_id, df.child_id1)"
School location - child 2,school_location_child2,"reindex(persons.school_zone_id, df.child_id2)"
School location - child 3,school_location_child3,"reindex(persons.school_zone_id, df.child_id3)"
School location - chauffer 1,_school_location_chauf1,"reindex(persons.workplace_zone_id, df.chauf_id1)"
School location - chauffer 2,_school_location_chauf2,"reindex(persons.workplace_zone_id, df.chauf_id2)"
Work location - chauffer 1,_work_location_chauf1,"reindex(persons.workplace_zone_id, df.chauf_id1)"
Work location - chauffer 2,_work_location_chauf2,"reindex(persons.workplace_zone_id, df.chauf_id2)"
Mandatory tour location - chauffer 1,_mandatory_location_chauf1,"_school_location_chauf1.where(ptype_chauf1 == 3, _work_location_chauf1)"
Mandatory tour location - chauffer 2,_mandatory_location_chauf2,"_school_location_chauf1.where(ptype_chauf2 == 3, _work_location_chauf2)"
# creating valid school locations to pass to skim_dict,,
,_valid_school_location_child1,school_location_child1.fillna(persons[persons.school_zone_id > 0].school_zone_id.mode()[0])
,_valid_school_location_child2,school_location_child2.fillna(persons[persons.school_zone_id > 0].school_zone_id.mode()[0])
,_valid_school_location_child3,school_location_child3.fillna(persons[persons.school_zone_id > 0].school_zone_id.mode()[0])
,_valid_mandatory_location_chauf1,_mandatory_location_chauf1.fillna(persons[persons.workplace_zone_id > 0].workplace_zone_id.mode()[0])
,_valid_mandatory_location_chauf2,_mandatory_location_chauf2.fillna(persons[persons.workplace_zone_id > 0].workplace_zone_id.mode()[0])
Auto time home to school - child 1,time_home_to_school1,"np.where(school_location_child1 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child1, ('SOV_TIME', 'AM')), 0)"
Auto time home to school - child 2,time_home_to_school2,"np.where(school_location_child2 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child2, ('SOV_TIME', 'AM')), 0)"
Auto time home to school - child 3,time_home_to_school3,"np.where(school_location_child3 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child3, ('SOV_TIME', 'AM')), 0)"
Auto time school to home - child 1,time_school_to_home1,"np.where(school_location_child1 > 0, skim_dict.lookup(_valid_school_location_child1, df.home_zone_id, ('SOV_TIME', 'AM')), 0)"
Auto time school to home - child 2,time_school_to_home2,"np.where(school_location_child2 > 0, skim_dict.lookup(_valid_school_location_child2, df.home_zone_id, ('SOV_TIME', 'AM')), 0)"
Auto time school to home - child 3,time_school_to_home3,"np.where(school_location_child3 > 0, skim_dict.lookup(_valid_school_location_child3, df.home_zone_id, ('SOV_TIME', 'AM')), 0)"
Auto dist home to school - child 1,dist_home_to_school1,"np.where(school_location_child1 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child1, ('SOV_DIST', 'AM')), 0)"
Auto dist home to school - child 2,dist_home_to_school2,"np.where(school_location_child2 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child2, ('SOV_DIST', 'AM')), 0)"
Auto dist home to school - child 3,dist_home_to_school3,"np.where(school_location_child3 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child3, ('SOV_DIST', 'AM')), 0)"
Auto dist intra school taz - child 1,dist_intra_school1,"np.where(school_location_child1 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child1, ('SOV_DIST', 'AM')), 0)"
Auto dist intra school taz - child 2,dist_intra_school2,"np.where(school_location_child2 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child2, ('SOV_DIST', 'AM')), 0)"
Auto dist intra school taz - child 3,dist_intra_school3,"np.where(school_location_child3 > 0, skim_dict.lookup(df.home_zone_id, _valid_school_location_child3, ('SOV_DIST', 'AM')), 0)"
Auto time home to work or university - chauffer 1,time_home_to_mand1,"np.where(_mandatory_location_chauf1 > 0, skim_dict.lookup(df.home_zone_id, _valid_mandatory_location_chauf1, ('SOV_TIME', 'AM')), 0)"
Auto time home to work or university - chauffer 2,time_home_to_mand2,"np.where(_mandatory_location_chauf2 > 0, skim_dict.lookup(df.home_zone_id, _valid_mandatory_location_chauf2, ('SOV_TIME', 'AM')), 0)"
Auto dist home to work or university - chauffer 1,dist_home_to_mand1,"np.where(_mandatory_location_chauf1 > 0, skim_dict.lookup(df.home_zone_id, _valid_mandatory_location_chauf1, ('SOV_DIST', 'AM')), 0)"
Auto dist home to work or university - chauffer 2,dist_home_to_mand2,"np.where(_mandatory_location_chauf2 > 0, skim_dict.lookup(df.home_zone_id, _valid_mandatory_location_chauf2, ('SOV_DIST', 'AM')), 0)"
# outbound distance combinations between chauffeurs and children,,
Distance from child 1 school to chauffeur 1 mandatory location,_dist_school1_to_mand1,"np.where((school_location_child1 > 0) & (_mandatory_location_chauf1 > 0), skim_dict.lookup(_valid_school_location_child1, _valid_mandatory_location_chauf1, ('SOV_TIME', 'AM')), 0)"
Distance from child 1 school to chauffeur 2 mandatory location,_dist_school1_to_mand2,"np.where((school_location_child1 > 0) & (_mandatory_location_chauf2 > 0), skim_dict.lookup(_valid_school_location_child1, _valid_mandatory_location_chauf2, ('SOV_TIME', 'AM')), 0)"
Distance from child 2 school to chauffeur 1 mandatory location,_dist_school2_to_mand1,"np.where((school_location_child2 > 0) & (_mandatory_location_chauf1 > 0), skim_dict.lookup(_valid_school_location_child2, _valid_mandatory_location_chauf1, ('SOV_TIME', 'AM')), 0)"
Distance from child 2 school to chauffeur 2 mandatory location,_dist_school2_to_mand2,"np.where((school_location_child2 > 0) & (_mandatory_location_chauf2 > 0), skim_dict.lookup(_valid_school_location_child2, _valid_mandatory_location_chauf2, ('SOV_TIME', 'AM')), 0)"
Distance from child 3 school to chauffeur 1 mandatory location,_dist_school3_to_mand1,"np.where((school_location_child3 > 0) & (_mandatory_location_chauf1 > 0), skim_dict.lookup(_valid_school_location_child3, _valid_mandatory_location_chauf1, ('SOV_TIME', 'AM')), 0)"
Distance from child 3 school to chauffeur 2 mandatory location,_dist_school3_to_mand2,"np.where((school_location_child3 > 0) & (_mandatory_location_chauf2 > 0), skim_dict.lookup(_valid_school_location_child3, _valid_mandatory_location_chauf2, ('SOV_TIME', 'AM')), 0)"
Distance from child 1 school to child 2 school,_dist_school1_to_school2,"np.where((school_location_child1 > 0) & (school_location_child2 > 0), skim_dict.lookup(_valid_school_location_child1, _valid_school_location_child2, ('SOV_TIME', 'AM')), 0)"
Distance from child 1 school to child 3 school,_dist_school1_to_school3,"np.where((school_location_child1 > 0) & (school_location_child3 > 0), skim_dict.lookup(_valid_school_location_child1, _valid_school_location_child3, ('SOV_TIME', 'AM')), 0)"
Distance from child 2 school to child 3 school,_dist_school2_to_school3,"np.where((school_location_child2 > 0) & (school_location_child3 > 0), skim_dict.lookup(_valid_school_location_child2, _valid_school_location_child3, ('SOV_TIME', 'AM')), 0)"
Distance from child 2 school to child 1 school,_dist_school2_to_school1,"np.where((school_location_child2 > 0) & (school_location_child1 > 0), skim_dict.lookup(_valid_school_location_child2, _valid_school_location_child1, ('SOV_TIME', 'AM')), 0)"
Distance from child 3 school to child 1 school,_dist_school3_to_school1,"np.where((school_location_child3 > 0) & (school_location_child1 > 0), skim_dict.lookup(_valid_school_location_child3, _valid_school_location_child1, ('SOV_TIME', 'AM')), 0)"
Distance from child 3 school to child 2 school,_dist_school3_to_school2,"np.where((school_location_child3 > 0) & (school_location_child2 > 0), skim_dict.lookup(_valid_school_location_child3, _valid_school_location_child2, ('SOV_TIME', 'AM')), 0)"
# absolute deviation distance outbound,,
Absolute deviation outbound distance Child 1 Chauffer 1,abs_dev_dist_out_child1_chauf1,"np.maximum(dist_home_to_school1 + _dist_school1_to_mand1 - dist_home_to_mand1,0)"
Absolute deviation outbound distance Child 1 Chauffer 2,abs_dev_dist_out_child1_chauf2,"np.maximum(dist_home_to_school1 + _dist_school1_to_mand2 - dist_home_to_mand2,0)"
Absolute deviation outbound distance Child 2 Chauffer 1,abs_dev_dist_out_child2_chauf1,"np.maximum(dist_home_to_school2 + _dist_school2_to_mand1 - dist_home_to_mand1,0)"
Absolute deviation outbound distance Child 2 Chauffer 2,abs_dev_dist_out_child2_chauf2,"np.maximum(dist_home_to_school2 + _dist_school2_to_mand2 - dist_home_to_mand2,0)"
Absolute deviation outbound distance Child 3 Chauffer 1,abs_dev_dist_out_child3_chauf1,"np.maximum(dist_home_to_school3 + _dist_school3_to_mand1 - dist_home_to_mand1,0)"
Absolute deviation outbound distance Child 3 Chauffer 2,abs_dev_dist_out_child3_chauf2,"np.maximum(dist_home_to_school3 + _dist_school3_to_mand2 - dist_home_to_mand2,0)"
Absolute deviation outbound distance child12 Chauffer 1,abs_dev_dist_out_child12_chauf1,"np.maximum(np.minimum(dist_home_to_school1 + _dist_school1_to_school2 + _dist_school2_to_mand1, dist_home_to_school2 + _dist_school2_to_school1 + _dist_school1_to_mand1) - dist_home_to_mand1, 0)"
Absolute deviation outbound distance child12 Chauffer 2,abs_dev_dist_out_child12_chauf2,"np.maximum(np.minimum(dist_home_to_school1 + _dist_school1_to_school2 + _dist_school2_to_mand2, dist_home_to_school2 + _dist_school2_to_school1 + _dist_school1_to_mand2) - dist_home_to_mand2, 0)"
Absolute deviation outbound distance child13 Chauffer 1,abs_dev_dist_out_child13_chauf1,"np.maximum(np.minimum(dist_home_to_school1 + _dist_school1_to_school3 + _dist_school3_to_mand1, dist_home_to_school3 + _dist_school3_to_school1 + _dist_school1_to_mand1) - dist_home_to_mand1, 0)"
Absolute deviation outbound distance child13 Chauffer 2,abs_dev_dist_out_child13_chauf2,"np.maximum(np.minimum(dist_home_to_school1 + _dist_school1_to_school3 + _dist_school3_to_mand2, dist_home_to_school3 + _dist_school3_to_school1 + _dist_school1_to_mand2) - dist_home_to_mand2, 0)"
Absolute deviation outbound distance child23 Chauffer 1,abs_dev_dist_out_child23_chauf1,"np.maximum(np.minimum(dist_home_to_school2 + _dist_school2_to_school3 + _dist_school3_to_mand1, dist_home_to_school3 + _dist_school3_to_school2 + _dist_school2_to_mand1) - dist_home_to_mand1, 0)"
Absolute deviation outbound distance child23 Chauffer 2,abs_dev_dist_out_child23_chauf2,"np.maximum(np.minimum(dist_home_to_school2 + _dist_school2_to_school3 + _dist_school3_to_mand2, dist_home_to_school3 + _dist_school3_to_school2 + _dist_school2_to_mand2) - dist_home_to_mand2, 0)"
,_dist_school1_school2_school3_mand1,"dist_home_to_school1 + _dist_school1_to_school2 + _dist_school2_to_school3 + _dist_school3_to_mand1"
,_dist_school1_school3_school2_mand1,"dist_home_to_school1 + _dist_school1_to_school3 + _dist_school3_to_school2 + _dist_school2_to_mand1"
,_dist_school2_school1_school3_mand1,"dist_home_to_school2 + _dist_school2_to_school1 + _dist_school1_to_school3 + _dist_school3_to_mand1"
,_dist_school2_school3_school1_mand1,"dist_home_to_school2 + _dist_school2_to_school3 + _dist_school3_to_school1 + _dist_school1_to_mand1"
,_dist_school3_school1_school2_mand1,"dist_home_to_school3 + _dist_school3_to_school1 + _dist_school1_to_school2 + _dist_school2_to_mand1"
,_dist_school3_school2_school1_mand1,"dist_home_to_school3 + _dist_school3_to_school2 + _dist_school2_to_school1 + _dist_school1_to_mand1"
,_min_dist_dropoff_order_out_child123_chauf1,_dist_school1_school2_school3_mand1
,_min_dist_dropoff_order_out_child123_chauf1,"np.where((_dist_school1_school3_school2_mand1 > 0) & (_dist_school1_school3_school2_mand1 < _min_dist_dropoff_order_out_child123_chauf1), _dist_school1_school3_school2_mand1, _min_dist_dropoff_order_out_child123_chauf1)"
,_min_dist_dropoff_order_out_child123_chauf1,"np.where((_dist_school2_school1_school3_mand1 > 0) & (_dist_school2_school1_school3_mand1 < _min_dist_dropoff_order_out_child123_chauf1), _dist_school2_school1_school3_mand1, _min_dist_dropoff_order_out_child123_chauf1)"
,_min_dist_dropoff_order_out_child123_chauf1,"np.where((_dist_school2_school3_school1_mand1 > 0) & (_dist_school2_school3_school1_mand1 < _min_dist_dropoff_order_out_child123_chauf1), _dist_school2_school3_school1_mand1, _min_dist_dropoff_order_out_child123_chauf1)"
,_min_dist_dropoff_order_out_child123_chauf1,"np.where((_dist_school3_school1_school2_mand1 > 0) & (_dist_school3_school1_school2_mand1 < _min_dist_dropoff_order_out_child123_chauf1), _dist_school3_school1_school2_mand1, _min_dist_dropoff_order_out_child123_chauf1)"
,_min_dist_dropoff_order_out_child123_chauf1,"np.where((_dist_school3_school2_school1_mand1 > 0) & (_dist_school3_school2_school1_mand1 < _min_dist_dropoff_order_out_child123_chauf1), _dist_school3_school2_school1_mand1, _min_dist_dropoff_order_out_child123_chauf1)"
Absolute deviation outbound distance child123 Chauffer 1,abs_dev_dist_out_child123_chauf1,"np.maximum(_min_dist_dropoff_order_out_child123_chauf1 - dist_home_to_mand1, 0)"
,_dist_school1_school2_school3_mand2,"dist_home_to_school1 + _dist_school1_to_school2 + _dist_school2_to_school3 + _dist_school3_to_mand2"
,_dist_school1_school3_school2_mand2,"dist_home_to_school1 + _dist_school1_to_school3 + _dist_school3_to_school2 + _dist_school2_to_mand2"
,_dist_school2_school1_school3_mand2,"dist_home_to_school2 + _dist_school2_to_school1 + _dist_school1_to_school3 + _dist_school3_to_mand2"
,_dist_school2_school3_school1_mand2,"dist_home_to_school2 + _dist_school2_to_school3 + _dist_school3_to_school1 + _dist_school1_to_mand2"
,_dist_school3_school1_school2_mand2,"dist_home_to_school3 + _dist_school3_to_school1 + _dist_school1_to_school2 + _dist_school2_to_mand2"
,_dist_school3_school2_school1_mand2,"dist_home_to_school3 + _dist_school3_to_school2 + _dist_school2_to_school1 + _dist_school1_to_mand2"
,_min_dist_dropoff_order_out_child123_chauf2,_dist_school1_school2_school3_mand2
,_min_dist_dropoff_order_out_child123_chauf2,"np.where((_dist_school1_school3_school2_mand2 > 0) & (_dist_school1_school3_school2_mand2 < _min_dist_dropoff_order_out_child123_chauf2), _dist_school1_school3_school2_mand2, _min_dist_dropoff_order_out_child123_chauf2)"
,_min_dist_dropoff_order_out_child123_chauf2,"np.where((_dist_school2_school1_school3_mand2 > 0) & (_dist_school2_school1_school3_mand2 < _min_dist_dropoff_order_out_child123_chauf2), _dist_school2_school1_school3_mand2, _min_dist_dropoff_order_out_child123_chauf2)"
,_min_dist_dropoff_order_out_child123_chauf2,"np.where((_dist_school2_school3_school1_mand2 > 0) & (_dist_school2_school3_school1_mand2 < _min_dist_dropoff_order_out_child123_chauf2), _dist_school2_school3_school1_mand2, _min_dist_dropoff_order_out_child123_chauf2)"
,_min_dist_dropoff_order_out_child123_chauf2,"np.where((_dist_school3_school1_school2_mand2 > 0) & (_dist_school3_school1_school2_mand2 < _min_dist_dropoff_order_out_child123_chauf2), _dist_school3_school1_school2_mand2, _min_dist_dropoff_order_out_child123_chauf2)"
,_min_dist_dropoff_order_out_child123_chauf2,"np.where((_dist_school3_school2_school1_mand2 > 0) & (_dist_school3_school2_school1_mand2 < _min_dist_dropoff_order_out_child123_chauf2), _dist_school3_school2_school1_mand2, _min_dist_dropoff_order_out_child123_chauf2)"
Absolute deviation outbound distance child123 Chauffer 1,abs_dev_dist_out_child123_chauf2,"np.maximum(_min_dist_dropoff_order_out_child123_chauf2 - dist_home_to_mand2, 0)"
# Availability for multiple bundles,,
,_return_min_taking_child1,"(pref_depart_time_school1 * mins_per_time_bin) + time_home_to_school1 + time_school_to_home1"
,_return_min_taking_child2,"(pref_depart_time_school2 * mins_per_time_bin) + time_home_to_school2 + time_school_to_home2"
,_return_min_taking_child3,"(pref_depart_time_school3 * mins_per_time_bin) + time_home_to_school3 + time_school_to_home3"
Availability of taking child 1 and then 2,_avail_child1_then_child2,"(_return_min_taking_child1 < (pref_depart_time_school2 * mins_per_time_bin))"
Availability of taking child 2 and then 1,_avail_child2_then_child1,"(_return_min_taking_child2 < (pref_depart_time_school1 * mins_per_time_bin))"
Availability of taking child 1 and then 3,_avail_child1_then_child3,"(_return_min_taking_child1 < (pref_depart_time_school3 * mins_per_time_bin))"
Availability of taking child 3 and then 1,_avail_child3_then_child1,"(_return_min_taking_child3 < (pref_depart_time_school1 * mins_per_time_bin))"
Availability of taking child 2 and then 3,_avail_child2_then_child3,"(_return_min_taking_child2 < (pref_depart_time_school3 * mins_per_time_bin))"
Availability of taking child 3 and then 2,_avail_child3_then_child2,"(_return_min_taking_child3 < (pref_depart_time_school2 * mins_per_time_bin))"
multiple_bundle_availability,avail_multiple_bundles,(_avail_child1_then_child2 | _avail_child2_then_child1 | _avail_child1_then_child3 | _avail_child3_then_child1 | _avail_child2_then_child3 | _avail_child3_then_child2)
# ,,
# Inbound specific terms ,,
Preferred return time from school - child 1,pref_return_time_school1,"reindex(tours[(tours.tour_type == 'school') & (tours.tour_num == 1)].set_index('person_id').end, df.child_id1)"
Preferred return time from school - child 2,pref_return_time_school2,"reindex(tours[(tours.tour_type == 'school') & (tours.tour_num == 1)].set_index('person_id').end, df.child_id2)"
Preferred return time from school - child 3,pref_return_time_school3,"reindex(tours[(tours.tour_type == 'school') & (tours.tour_num == 1)].set_index('person_id').end, df.child_id3)"
Preferred return time from work / univ - chauffer 1,pref_return_time_chauf1,"reindex(tours[(tours.tour_category == 'mandatory') & (tours.tour_num == 1)].set_index('person_id').end, df.chauf_id1)"
Preferred return time from work / univ - chauffer 2,pref_return_time_chauf2,"reindex(tours[(tours.tour_category == 'mandatory') & (tours.tour_num == 1)].set_index('person_id').end, df.chauf_id2)"
