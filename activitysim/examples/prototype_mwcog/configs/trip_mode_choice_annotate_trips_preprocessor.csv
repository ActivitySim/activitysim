Description,Target,Expression,
,is_joint,(df.number_of_participants > 1),
,is_indiv,(df.number_of_participants == 1),
,is_atwork_subtour,~df.parent_tour_id.isnull(),
,is_school,"(df.primary_purpose=='school') & (df.purpose.isin(['school', 'Home']))",
,c_cost,(0.60 * coef_ivt) / df.value_of_time,
,ivot,1.0 / df.value_of_time,
#,,,
#atwork subtours,,,
#FIXME tripModeChoice uec wrongly conflates these with tour_mode_is_bike?,,,
,parent_tour_mode,"reindex(tours.tour_mode, df.parent_tour_id).fillna('')",
,work_tour_is_SOV,parent_tour_mode.isin(['DRIVEALONE']),
,work_tour_is_bike,parent_tour_mode=='BIKE',
#,,,
,i_tour_mode,df.tour_mode.map(I_MODE_MAP),
,tour_mode_is_SOV,i_tour_mode.isin(I_SOV_MODES),
,tour_mode_is_sr2,i_tour_mode.isin(I_SR2_MODES),
,tour_mode_is_sr3p,i_tour_mode.isin(I_SR3P_MODES),
,tour_mode_is_auto,i_tour_mode.isin(I_AUTO_MODES),
,tour_mode_is_walk,i_tour_mode.isin([I_WALK_MODE]),
,tour_mode_is_bike,i_tour_mode.isin([I_BIKE_MODE]),
,tour_mode_is_walk_transit,i_tour_mode.isin(I_WALK_TRANSIT_MODES),
,tour_mode_is_drive_transit,i_tour_mode.isin(I_DRIVE_TRANSIT_MODES),
,tour_mode_not_drive_transit,~tour_mode_is_drive_transit,
,tour_mode_is_pnr_transit,i_tour_mode.isin(I_PNR_TRANSIT_MODES),
,tour_mode_is_knr_transit,i_tour_mode.isin(I_KNR_TRANSIT_MODES),
,tour_mode_is_ab,i_tour_mode.isin(I_AB_MODES),
,tour_mode_is_bm,i_tour_mode.isin(I_BM_MODES),
,tour_mode_is_mr,i_tour_mode.isin(I_MR_MODES),
,tour_mode_is_cr,i_tour_mode.isin(I_CR_MODES),
,tour_mode_is_school_bus,i_tour_mode.isin(I_SCHOOLBUS_MODE),
,tour_mode_is_ride_hail,i_tour_mode.isin(I_RIDE_HAIL_MODES),
#,,,
,inbound,~df.outbound,
,first_trip,df.trip_num == 1,
,last_trip,df.trip_num == df.trip_count,
origin terminal time not counted at home,_origin_terminal_time,"np.where(df.outbound & first_trip, 0, reindex(land_use.TERMINAL, df[ORIGIN]))",
dest terminal time not counted at home,_dest_terminal_time,"np.where(inbound & last_trip, 0, reindex(land_use.TERMINAL, df[DESTINATION]))",
,total_terminal_time,_origin_terminal_time + _dest_terminal_time,
#,,,
,free_parking_available,(df.tour_type == 'work') & df.free_parking_at_work,
,dest_hourly_peak_parking_cost,"reindex(land_use.PRKCST, df[DESTINATION])",
,origin_hourly_peak_parking_cost,"reindex(land_use.PRKCST, df[ORIGIN])",
,origin_duration,"np.where(first_trip, np.where(inbound,df.duration/2 * ~free_parking_available,0), 1)",
,dest_duration,"np.where(last_trip, np.where(inbound, df.duration/2 * ~free_parking_available, 0), 1)",
,origin_parking_cost,origin_duration*origin_hourly_peak_parking_cost,
,dest_parking_cost,dest_duration*dest_hourly_peak_parking_cost,
,total_parking_cost,(origin_parking_cost + dest_parking_cost) / 2.0,
,trip_topology,"np.where(df.outbound, reindex(land_use.TOPOLOGY, df[DESTINATION]), reindex(land_use.TOPOLOGY, df[ORIGIN]))",
,density_index,"np.where(df.outbound, reindex(land_use.density_index, df[DESTINATION]), reindex(land_use.density_index, df[ORIGIN]))",
,origin_density_index,"np.where(df.outbound, reindex(land_use.density_index, df[ORIGIN]), reindex(land_use.density_index, df[DESTINATION]))",
# FIXME no transit subzones so all zones short walk to transit,,,
,_walk_transit_origin,True,
,_walk_transit_destination,True,
,walk_transit_available,_walk_transit_origin & _walk_transit_destination & (tour_mode_not_drive_transit),
,pnr_transit_available,tour_mode_is_pnr_transit,
,knr_transit_available,tour_mode_is_knr_transit,
,origin_walk_time,shortWalk*60/walkSpeed,
,destination_walk_time,shortWalk*60/walkSpeed,
# RIDEHAIL,,,
,origin_density_measure,"(reindex(land_use.TOTPOP, df[orig_col_name]) + reindex(land_use.TOTEMP, df[orig_col_name])) / (reindex(land_use.LANDAREA*640, df[orig_col_name]) / 640)",
,origin_density,"pd.cut(origin_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)",
,origin_zone_taxi_wait_time_mean,"origin_density.map({k: v for k, v in Taxi_waitTime_mean.items()})",
,origin_zone_taxi_wait_time_sd,"origin_density.map({k: v for k, v in Taxi_waitTime_sd.items()})",
# ,, Note that the mean and standard deviation are not the values for the distribution itself, but of the underlying normal distribution it is derived from
,origTaxiWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_taxi_wait_time_mean, sigma=origin_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,origin_zone_singleTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})",
,origin_zone_singleTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})",
,origSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_singleTNC_wait_time_mean, sigma=origin_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,origin_zone_sharedTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})",
,origin_zone_sharedTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})",
,origSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_sharedTNC_wait_time_mean, sigma=origin_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
#,,,
,sov_available,(odt_skims['SOV_TIME']>0) & tour_mode_not_drive_transit,
,hov2_available,(odt_skims['HOV2_TIME']>0) & tour_mode_not_drive_transit,
,hov3_available,(odt_skims['HOV3_TIME']>0) & tour_mode_not_drive_transit,
,walk_ab_available,walk_transit_available & (odt_skims['WK_AB_WK_IVTLB']>0) & tour_mode_is_ab,
,walk_bm_available,walk_transit_available & (odt_skims['WK_BM_WK_IVTMR']>0) & tour_mode_is_bm,
,walk_mr_available,walk_transit_available & (odt_skims['WK_MR_WK_IVTMR']>0) & tour_mode_is_mr,
,walk_cr_available,walk_transit_available & (odt_skims['WK_CR_WK_IVTCR']>0) & tour_mode_is_cr,
,pnr_ab_available_outbound,pnr_transit_available & df.outbound & (odt_skims['DR_AB_WK_IVTLB']>0) & tour_mode_is_ab,
,pnr_ab_available_inbound,pnr_transit_available & ~df.outbound & (odt_skims['WK_AB_DR_IVTLB']>0) & tour_mode_is_ab,
,pnr_bm_available_outbound,pnr_transit_available & df.outbound & (odt_skims['DR_BM_WK_IVTMR']>0) & tour_mode_is_bm,
,pnr_bm_available_inbound,pnr_transit_available & ~df.outbound & (odt_skims['WK_BM_DR_IVTMR']>0) & tour_mode_is_bm,
,pnr_mr_available_outbound,pnr_transit_available & df.outbound & (odt_skims['DR_MR_WK_IVTMR']>0) & tour_mode_is_mr,
,pnr_mr_available_inbound,pnr_transit_available & ~df.outbound & (odt_skims['WK_MR_DR_IVTMR']>0) & tour_mode_is_mr,
,pnr_cr_available_outbound,pnr_transit_available & df.outbound & (odt_skims['DR_CR_WK_IVTCR']>0) & tour_mode_is_cr,
,pnr_cr_available_inbound,pnr_transit_available & ~df.outbound & (odt_skims['WK_CR_DR_IVTCR']>0) & tour_mode_is_cr,
,knr_ab_available_outbound,knr_transit_available & df.outbound & (odt_skims['KR_AB_WK_IVTLB']>0) & tour_mode_is_ab,
,knr_ab_available_inbound,knr_transit_available & ~df.outbound & (odt_skims['WK_AB_KR_IVTLB']>0) & tour_mode_is_ab,
,knr_bm_available_outbound,knr_transit_available & df.outbound & (odt_skims['KR_BM_WK_IVTMR']>0) & tour_mode_is_bm,
,knr_bm_available_inbound,knr_transit_available & ~df.outbound &  (odt_skims['WK_BM_KR_IVTMR']>0) & tour_mode_is_bm,
,knr_mr_available_outbound,knr_transit_available & df.outbound & (odt_skims['KR_MR_WK_IVTMR']>0) & tour_mode_is_mr,
,knr_mr_available_inbound,knr_transit_available & ~df.outbound & (odt_skims['WK_MR_KR_IVTMR']>0) & tour_mode_is_mr,
,knr_cr_available_outbound,knr_transit_available & df.outbound & (odt_skims['KR_CR_WK_IVTCR']>0) & tour_mode_is_cr,
,knr_cr_available_inbound,knr_transit_available & ~df.outbound & (odt_skims['WK_CR_KR_IVTCR']>0) & tour_mode_is_cr,
#,od_dist_walk,od_skims['DISTWALK'],
#,do_dist_walk,od_skims.reverse('DISTWALK'),
#,max_dist_walk,od_skims.max('DISTWALK'),
#,dist_bike,od_skims['DISTBIKE'],
#,dist_only,od_skims['DIST'],
