# activitysim workflow example_runner example_name=example_mtc

context_parser: pypyr.parser.keyvaluepairs

on_failure:
- name: activitysim.workflows.steps.py
  in:
    label: FAILURE
    py: |
      print("FAILURE")

steps:

- description: Setting default workflow parameters
  name: pypyr.steps.default
  in:
    defaults:
      example_name: example_mtc
      workspace: workspace
      legacy: True
      compile: True
      sharrow: True
      tag:
      resume_after:
      fast: False

- name: activitysim.workflows.steps.title
  in:
    label: "[bold blue]activitysim workflow example_runner {example_name}"

- name: activitysim.workflows.steps.py
  in:
    label: Make {workspace} directory if it does not exist
    py: |
      import os
      os.makedirs(f"{workspace}", exist_ok=True)

- activitysim.workflows.steps.make_tag

- name: activitysim.workflows.steps.cmd
  in:
    cmd:
      label: "activitysim create {example_name}"
      run: python -m activitysim create -e {example_name} -d . --link
      cwd: "{workspace}"

- activitysim.workflows.steps.directory_prep
#- name: activitysim.workflows.steps.py
#  in:
#    label: Make archive directory for this tag
#    py: |
#      import os
#      from pathlib import Path
#      archive_dir = f"{workspace}/{example_name}/output-{tag}"
#      os.makedirs(archive_dir, exist_ok=True)
#      if sharrow:
#        os.makedirs(f"{archive_dir}/output-compile", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-compile/log", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-compile/trace", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-sharrow", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-sharrow/log", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-sharrow/trace", exist_ok=True)
#      if legacy:
#        os.makedirs(f"{archive_dir}/output-legacy", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-legacy/log", exist_ok=True)
#        os.makedirs(f"{archive_dir}/output-legacy/trace", exist_ok=True)
#      save(archive_dir=archive_dir, archive_base=os.path.basename(archive_dir))

- description: "write.configs_sh_compile"
  name: pypyr.steps.filewriteyaml
  run: '{compile}'
  in:
    fileWriteYaml:
      path: "{workspace}/{example_name}/configs_sh_compile/settings.yaml"
      payload:
        inherit_settings: True
        sharrow: test
        chunk_training_mode: disabled
        households_sample_size: 10000

- name: activitysim.workflows.steps.update_yaml
  in:
    updateYaml:
      path: "{workspace}/{example_name}/configs/settings.yaml"
      payload:
        cache_dir: cache
        households_sample_size: 100000

- description: Run activitysim to compile and test sharrow-enabled model
  name: activitysim.workflows.steps.cmd
  run: '{compile}'
  in:
    cmd:
      run: "python -m activitysim run -c configs_sh_compile -c configs -d data -o output-{tag}/output-compile {flags}"
      cwd: "{workspace}/{example_name}"
      label: "{example_name} -- sharrow compile"

#- description: Archive outputs of compile
#  name: activitysim.workflows.steps.archive_outputs
#  run: '{sharrow}'
#  in:
#    source: "output-compile"
#    destination: "{archive_base}/output-sh-compile"

- description: write.configs_sh
  name: pypyr.steps.filewriteyaml
  run: '{sharrow}'
  in:
    fileWriteYaml:
      path: "{workspace}/{example_name}/configs_sh/settings.yaml"
      payload:
        inherit_settings: True
        sharrow: require

- description: Run activitysim to evaluate sharrow-enabled model
  name: activitysim.workflows.steps.cmd
  run: '{sharrow}'
  in:
    cmd:
      run: "python -m activitysim run -c configs_sh -c configs -d data -o output-{tag}/output-sharrow {flags}"
      cwd: "{workspace}/{example_name}"
      label: "{example_name} -- sharrow run"

#- description: Archive outputs of sharrow run
#  name: activitysim.workflows.steps.archive_outputs
#  run: '{sharrow}'
#  in:
#    source: "output"
#    destination: "{archive_base}/output-sh"

- description: write.configs_sh
  name: pypyr.steps.filewriteyaml
  run: '{legacy}'
  in:
    fileWriteYaml:
      path: "{workspace}/{example_name}/configs_legacy/settings.yaml"
      payload:
        inherit_settings: True
        recode_pipeline_columns: False
        offset_preprocessing: False

- description: Run activitysim to evaluate legacy model
  name: activitysim.workflows.steps.cmd
  run: '{legacy}'
  in:
    cmd:
      run: "python -m activitysim run -c configs_legacy -c configs -d data -o output-{tag}/output-legacy {flags}"
      cwd: "{workspace}/{example_name}"
      label: "{example_name} -- legacy run"

#- description: Archive outputs of legacy run
#  name: activitysim.workflows.steps.archive_outputs
#  run: '{legacy}'
#  in:
#    source: "output"
#    destination: "{archive_base}/output-legacy"

- activitysim.workflows.steps.composite_log
- activitysim.workflows.steps.contrast_report

