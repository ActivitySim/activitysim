# activitysim workflow example_runner example_name=example_mtc

context_parser: pypyr.parser.keyvaluepairs
steps:

- description: Default to testing example_mtc if no other example is named
  name: pypyr.steps.default
  in:
    defaults:
      example_name: example_mtc
      workspace: workspace
      legacy: True
      tag:

- name: activitysim.workflows.steps.title
  in:
    label: "[bold blue]activitysim workflow example_runner {example_name}"

- name: activitysim.workflows.steps.py
  in:
    label: Make {workspace} directory if it does not exist
    py: |
      import os
      os.makedirs(f"{workspace}", exist_ok=True)

- name: activitysim.workflows.steps.py
  in:
    label: Generate a tag based on datetime if tag is not given
    py: |
      import time
      if tag is None:
        tag = time.strftime("%Y-%m-%d-%H%M%S")
        print(f"{tag=}")
      save(tag=tag)

- name: activitysim.workflows.steps.cmd
  in:
    cmd:
      label: "activitysim create {example_name}"
      run: python -m activitysim create -e {example_name} -d . --link
      cwd: "{workspace}"

- name: pypyr.steps.py
  in:
    label: Make archive directory for this tag
    py: |
      import os
      from pathlib import Path
      archive_dir = f"{workspace}/{example_name}/archive-{tag}"
      os.makedirs(archive_dir)
      os.makedirs(f"{workspace}/{example_name}/output-compile", exist_ok=True)
      os.makedirs(f"{workspace}/{example_name}/output-compile/log", exist_ok=True)
      save(archive_dir=archive_dir, archive_base=os.path.basename(archive_dir))

- description: write.configs_sh_compile
  name: pypyr.steps.filewriteyaml
  in:
    fileWriteYaml:
      path: "{workspace}/{example_name}/configs_sh_compile/settings.yaml"
      payload:
        inherit_settings: True
        sharrow: test
        chunk_training_mode: disabled
        households_sample_size: 100

- name: activitysim.workflows.steps.update_yaml
  in:
    updateYaml:
      path: "{workspace}/{example_name}/configs/settings.yaml"
      payload:
        cache_dir: cache

- description: Run activitysim to compile and test sharrow-enabled model
  name: activitysim.workflows.steps.cmd
  in:
    cmd:
      run: python -m activitysim run -c configs_sh_compile -c configs -d data -o output-compile
      cwd: "{workspace}/{example_name}"
      label: "{example_name} -- sharrow compile"

- description: Archive outputs of compile
  name: activitysim.workflows.steps.archive_outputs
  in:
    source: "output-compile"
    destination: "{archive_base}/output-sh-compile"

- description: write.configs_sh
  name: pypyr.steps.filewriteyaml
  in:
    fileWriteYaml:
      path: "{workspace}/{example_name}/configs_sh/settings.yaml"
      payload:
        inherit_settings: True
        sharrow: require

- description: Run activitysim to evaluate sharrow-enabled model
  name: activitysim.workflows.steps.cmd
  in:
    cmd:
      run: python -m activitysim run -c configs_sh -c configs -d data -o output
      cwd: "{workspace}/{example_name}"
      label: "{example_name} -- sharrow run"

- description: Archive outputs of sharrow run
  name: activitysim.workflows.steps.archive_outputs
  in:
    source: "output"
    destination: "{archive_base}/output-sh"

- description: Run activitysim to evaluate legacy model
  name: activitysim.workflows.steps.cmd
  run: '{legacy}'
  in:
    cmd:
      run: python -m activitysim run -c configs -d data -o output
      cwd: "{workspace}/{example_name}"
      label: "{example_name} -- legacy run"

- description: Archive outputs of legacy run
  name: activitysim.workflows.steps.archive_outputs
  run: '{legacy}'
  in:
    source: "output"
    destination: "{archive_base}/output-legacy"

- name: activitysim.workflows.steps.py
  in:
    label: Generate composite timing log
    py: |
      import pandas as pd
      timings = {}
      for t in ['sh-compile', 'sh', 'legacy']:
        df = pd.read_csv(f"{workspace}/{example_name}/{archive_base}/output-{t}/log/timing_log.csv")
        timings[t] = df.set_index("model_name")['seconds']
      composite_timing = pd.concat(timings, axis=1)
      composite_timing.to_csv(f"{workspace}/{example_name}/{archive_base}/combined_timing_log-{tag}.csv")
      mems = {}
      for t in ['sh-compile', 'sh', 'legacy']:
          df = pd.read_csv(f"{workspace}/{example_name}/{archive_base}/output-{t}/log/mem.csv")
          mems[t] = df.set_index('event')[['rss', 'full_rss', 'uss']]
      composite_mem = pd.concat(mems, axis=1)
      composite_mem.to_csv(f"{workspace}/{example_name}/{archive_base}/combined_mem_log-{tag}.csv")
