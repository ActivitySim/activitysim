Description,Target,Expression
#,, annotate persons table after import
age_16_to_19,age_16_to_19,"persons.age.between(16, 19)"
age_16_p,age_16_p,persons.age >= 16
adult,adult,persons.age >= 18
male,male,persons.sex == 1
female,female,persons.sex == 2
presence of non_worker other than self in household,has_non_worker,"other_than(persons.household_id, persons.ptype == constants.PTYPE_NONWORK)"
presence of retiree other than self in household,has_retiree,"other_than(persons.household_id, persons.ptype == constants.PTYPE_RETIRED)"
presence of preschooler other than self in household,has_preschool_kid,"other_than(persons.household_id, persons.ptype == constants.PTYPE_PRESCHOOL)"
presence of driving_kid other than self in household,has_driving_kid,"other_than(persons.household_id, persons.ptype == constants.PTYPE_DRIVING)"
presence of school_kid other than self in household,has_school_kid,"other_than(persons.household_id, persons.ptype == constants.PTYPE_SCHOOL)"
presence of full_time worker other than self in household,has_full_time,"other_than(persons.household_id, persons.ptype == constants.PTYPE_FULL)"
presence of part_time worker other than self in household,has_part_time,"other_than(persons.household_id, persons.ptype == constants.PTYPE_PART)"
presence of university student other than self in household,has_university,"other_than(persons.household_id, persons.ptype == constants.PTYPE_UNIVERSITY)"
student_is_employed,student_is_employed,"(persons.ptype.isin([constants.PTYPE_UNIVERSITY, constants.PTYPE_DRIVING]) & persons.pemploy.isin([constants.PEMPLOY_FULL, constants.PEMPLOY_PART]))"
nonstudent_to_school,nonstudent_to_school,"(persons.ptype.isin([constants.PTYPE_FULL, constants.PTYPE_PART, constants.PTYPE_NONWORK, constants.PTYPE_RETIRED]) & persons.pstudent.isin([constants.PSTUDENT_GRADE_OR_HIGH, constants.PSTUDENT_UNIVERSITY]))"
is_worker,is_worker,"persons.pemploy.isin([constants.PEMPLOY_FULL, constants.PEMPLOY_PART])"
#,, FIXME - if person is a university student but has school age student category value then reset student category value
,pstudent,"persons.pstudent.where(persons.ptype!=constants.PTYPE_UNIVERSITY, constants.PSTUDENT_UNIVERSITY)"
#,, FIXME if person is a student of any kind but has full-time employment status then reset student category value to non-student
,pstudent,"pstudent.where(persons.ptype!=constants.PTYPE_FULL, constants.PSTUDENT_NOT)"
#,, FIXME if student category is non-student and employment is student then reset student category value to student
,pstudent,"pstudent.where((persons.ptype!=constants.PTYPE_DRIVING) & (persons.ptype!=constants.PTYPE_SCHOOL), constants.PSTUDENT_GRADE_OR_HIGH)"
#,,
is_student,is_student,"pstudent.isin([constants.PSTUDENT_GRADE_OR_HIGH, constants.PSTUDENT_UNIVERSITY])"
is_gradeschool,is_gradeschool,"(pstudent == constants.PSTUDENT_GRADE_OR_HIGH) & (persons.age <= setting('grade_school_max_age'))"
is_highschool,is_highschool,"(pstudent == constants.PSTUDENT_GRADE_OR_HIGH) & (persons.age > setting('grade_school_max_age'))"
is_university,is_university,"pstudent == constants.PSTUDENT_UNIVERSITY"
#,,
home_taz,home_taz,"reindex(households.TAZ, persons.household_id)"
